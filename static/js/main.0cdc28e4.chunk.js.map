{"version":3,"sources":["components/Header/Header.tsx","utils/pickRandomItem.ts","global/parcoursupAPI.ts","utils/loadFormationData.ts","components/FormationInfos/FormationInfos.tsx","assets/marker.svg","components/MapWrapper/clusterLayer.ts","components/MapWrapper/clusterSource.ts","components/MapWrapper/osmLayer.ts","components/MapWrapper/MapWrapper.tsx","components/GirlBoyProportion/GirlBoyProportion.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","Math","floor","random","parcoursupAPI","loadFormationData","code_formation","a","requestURL","axios","get","result","data","nhits","records","fields","FormationInfos","useState","school","setSchool","loadData","console","log","useEffect","getField","fieldName","count_candidat_boys","count_candidat_girls","count_accepted_boys","count_accepted_girls","title","clusterLayer","clusterSource","styleCache","VectorLayer","source","style","feature","size","length","schoolName","getProperties","Style","image","Icon","src","markerIcon","color","anchor","scale","text","Text","offsetY","Circle","radius","stroke","Stroke","fill","Fill","toString","Cluster","distance","minDistance","osmLayer","TileLayer","maxZoom","XYZ","url","MapWrapper","props","map","setMap","setSource","mapElement","useRef","new_source","VectorSource","initialMap","Map","target","current","undefined","layers","view","View","projection","center","zoom","controls","schoolsData","features","filter","entry","coord","feat","Feature","geometry","Point","transform","reverse","setProperties","clear","addFeatures","getView","fit","getExtent","padding","ref","GirlBoyProportion","dataCandidats","key","value","dataAccepted","pourcentageCandidates","toFixed","pourcentageAccepted","ResponsiveContainer","width","height","PieChart","Pie","label","startAngle","endAngle","dataKey","nameKey","cx","cy","innerRadius","outerRadius","index","Cell","Legend","iconSize","layout","verticalAlign","align","App","setSchoolsData","finished","dataLength","concat","r","error","Helmet","name","content","dataAttribution","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cdc28e4.chunk.js","sourcesContent":["import logoParcoursup from '../../assets/logoParcoursup.svg'\n\nimport './Header.scss'\n\nconst Header = () => {\n    return (\n        <div className=\"pcs-header\">\n            {/* <img\n                className=\"pcs-header-logo\"\n                src={logoParcoursup}\n                alt=\"Logo Parcoursup\"\n            /> */}\n            <h1 className=\"pcs-header-title\">\n                📊 Statistiques sur la plateforme\n            </h1>\n        </div>\n    )\n}\n\nexport default Header\n","const { floor, random } = Math\n\nexport const pickRandomItem = <T = any>(items: T[]) => {\n    return items[floor(random() * items.length)]\n}\n","export const parcoursupAPI =\n    'https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup'\n","import axios from 'axios'\nimport { parcoursupAPI } from 'global/parcoursupAPI'\n\nexport const loadFormationData = async (code_formation: string) => {\n    try {\n        const requestURL =\n            parcoursupAPI + `&q=cod_aff_form%3D\"${code_formation}\"`\n        const result = await axios.get(requestURL)\n        if (result.data && result.data.nhits === 1) {\n            return result.data.records[0].fields\n        }\n        return {}\n    } catch (e) {\n        return {}\n    }\n}\n","import { GirlBoyProportion } from 'components'\nimport { useEffect, useState } from 'react'\nimport { formationToEmoji, loadFormationData } from 'utils'\nimport './FormationInfos.scss'\n\nconst FormationInfos = () => {\n    const [school, setSchool] = useState<Record<string, any>>({})\n\n    const loadData = async () => {\n        const result = await loadFormationData('55')\n        console.log(result)\n        setSchool(result)\n    }\n\n    useEffect(() => {\n        loadData()\n    }, [])\n\n    const getField = (fieldName: string) => {\n        if (school[fieldName]) return school[fieldName]\n        return 'NaN'\n    }\n    return (\n        <div className=\"pcs-formationinfos-fragment\">\n            <h1 className=\"pcs-formationinfos-title\">\n                Informations sur la formation\n            </h1>\n            <div className=\"pcs-formationinfos\">\n                <h1 className=\"pcs-schoolname\">\n                    {getField('fil_lib_voe_acc')}\n                </h1>\n                <p>\n                    🏢 {getField('g_ea_lib_vx')} - {getField('contrat_etab')}\n                    <br />\n                    🗺 {getField('dep_lib')} ({getField('dep')}) -{' '}\n                    {getField('region_etab_aff')}\n                </p>\n            </div>\n            <div className=\"pcs-formationinfos-stats\">\n                <p>En 2020 :<br/>\n                    {getField('voe_tot')} voeux enregistrés pour cette formation\n                </p>\n            </div>\n            <GirlBoyProportion \n                count_candidat_boys={getField('voe_tot') - getField('voe_tot_f')} \n                count_candidat_girls={getField('voe_tot_f')} \n                count_accepted_boys={getField('acc_tot') - getField('acc_tot_f')} \n                count_accepted_girls={getField('acc_tot_f')} \n                title={'Proportion de candidates / candidats'} />\n        </div>\n    )\n}\n\nexport default FormationInfos\n","export default __webpack_public_path__ + \"static/media/marker.7a162fbb.svg\";","import VectorLayer from \"ol/layer/Vector\";\nimport Fill from \"ol/style/Fill\";\nimport Circle from \"ol/style/Circle\";\nimport Stroke from \"ol/style/Stroke\";\nimport Text from \"ol/style/Text\";\nimport Icon from \"ol/style/Icon\";\nimport Style from \"ol/style/Style\";\nimport markerIcon from '../../assets/marker.svg'\n\nconst clusterLayer = (clusterSource: any) => \n{\n    const styleCache: Record<string, Style[]> = {};\n    return new VectorLayer({\n    source: clusterSource,\n    style: (feature) => {\n      const size = feature.get('features').length;\n      let style = styleCache[size];\n      if (!style || size === 1) {\n        if (size === 1)\n        {\n            const schoolName = feature.get('features')[0].getProperties()['g_ea_lib_vx']\n            style=  [new Style({\n                image: new Icon({\n                    src: markerIcon,\n                    color: '#e63946',\n                    anchor: [0.5, 1],\n                    scale: 0.5,\n                }),\n                text: new Text({\n                    text: schoolName,\n                    offsetY: 10,\n                })\n            })]\n        }\n        else {\n            style = [new Style({\n                image: new Circle({\n                  radius: 15,\n                  stroke: new Stroke({\n                    color: '#e63946',\n                  }),\n                  fill: new Fill({\n                    color: '#1d3557',\n                  }),\n                }),\n                text: new Text({\n                  text: size.toString(),\n                  fill: new Fill({\n                    color: '#fff',\n                  }),\n                }),\n              })];\n        }\n        styleCache[size] = style;\n      }\n      return style;\n    },\n  });\n}\n\nexport default clusterLayer\n","import Geometry from 'ol/geom/Geometry';\nimport {Cluster, Vector as VectorSource} from 'ol/source';\n\nconst clusterSource = (source: VectorSource<Geometry>) => {\n    return new Cluster({\n        distance: 40,\n        minDistance: 20,\n        source: source,\n    });\n}\n\nexport default clusterSource","import TileLayer from 'ol/layer/Tile'\nimport XYZ from 'ol/source/XYZ'\n\nexport const osmLayer = () => {\n    return new TileLayer({\n    maxZoom: 19,\n    source: new XYZ({\n        url: 'https://cartodb-basemaps-a.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png',\n    }),\n    })\n}\n\nexport default osmLayer","import { useState, useRef, useEffect, RefObject } from 'react'\n\nimport './MapWrapper.scss'\n\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport VectorSource from 'ol/source/Vector'\nimport Geometry from 'ol/geom/Geometry'\nimport { Feature } from 'ol'\nimport Point from 'ol/geom/Point'\nimport { transform } from 'ol/proj'\n\nimport clusterLayer from './clusterLayer'\nimport clusterSource from './clusterSource'\nimport osmLayer from './osmLayer'\n\nexport interface MapWrapperProps {\n    schoolsData: Record<string, any>[]\n    dataAttribution: string\n}\n\nconst MapWrapper = (props: MapWrapperProps) => {\n    const [map, setMap] = useState<Map>()\n    const [source, setSource] =\n        useState<VectorSource<Geometry>>()\n\n    const mapElement = useRef() as RefObject<HTMLDivElement>\n\n    useEffect(() => {\n        const new_source = new VectorSource()\n\n        const initialMap = new Map({\n            target: mapElement.current ?? undefined,\n            layers: [\n                osmLayer(),\n                clusterLayer(clusterSource(new_source)),\n            ],\n            view: new View({\n                projection: 'EPSG:3857',\n                center: [0, 0],\n                zoom: 2,\n            }),\n            controls: [],\n        })\n\n        // save map and vector layer references to state\n        setMap(initialMap)\n        setSource(new_source)\n    }, [])\n\n    useEffect(() => {\n        if (!source || props.schoolsData.length === 0) return\n\n        const features = props.schoolsData\n        .filter((entry) => { return entry['g_olocalisation_des_formations'] !== undefined })\n        .map((entry) => {\n            const coord = entry['g_olocalisation_des_formations']\n            const feat = new Feature({\n                geometry: new Point(\n                    transform(coord.reverse(), 'EPSG:4326', 'EPSG:3857')\n                ),\n            })\n            feat.setProperties({ ...entry })\n            return feat\n        })\n\n        if(!features) return\n        source.clear()\n        source.addFeatures(features)\n        if (!map) return\n        map.getView().fit(source.getExtent(), {\n            padding: [100, 100, 100, 100],\n        })\n    }, [props.schoolsData])\n\n    return (\n        <div className=\"pcs-map-fragment\">\n            <h1 className=\"pcs-map-title\">Carte des formations</h1>\n            <div className=\"pcs-map-container\">\n                <div ref={mapElement} className=\"pcs-map\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default MapWrapper\n","\nimport { ResponsiveContainer, PieChart, Pie, Legend, Cell } from 'recharts'\n\nexport interface GirlBoyProportionProps {\n    count_candidat_boys: number,\n    count_candidat_girls: number,\n    count_accepted_boys: number,\n    count_accepted_girls: number,\n    title: string,\n}\n\nconst GirlBoyProportion = (props: GirlBoyProportionProps) => {\n    const dataCandidats = [\n        { key: \"Nombre de candidates\", value: props.count_candidat_girls, color: '#e29578'},\n        { key: \"Nombre de candidats\", value: props.count_candidat_boys, color: '#006d77'}\n    ]\n\n    const dataAccepted = [\n        { key: \"Nombre d'acceptées\", value: props.count_accepted_girls, color: '#e27890'},\n        { key: \"Nombre d'acceptés\", value: props.count_accepted_boys, color: '#b7f0c6'}\n        ]\n\n    const pourcentageCandidates = (props.count_candidat_girls / ( props.count_candidat_girls + props.count_candidat_boys) * 100).toFixed(0)\n    const pourcentageAccepted = (props.count_accepted_girls / ( props.count_accepted_girls + props.count_accepted_boys) * 100).toFixed(0)\n    return (\n        <div>\n            <h1>{props.title}</h1>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                    <Pie\n                        data={dataCandidats} \n                        label\n                        startAngle={0} endAngle={180}\n                        dataKey=\"value\" nameKey=\"key\" cx=\"50%\" cy=\"100%\" innerRadius={80} outerRadius={120} fill=\"#8884d8\" >\n                        {dataCandidats.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                    </Pie>\n\n                    <Pie\n                        data={dataAccepted} \n                        label\n                        startAngle={0} endAngle={180}\n                        dataKey=\"value\" nameKey=\"key\" cx=\"50%\" cy=\"100%\" innerRadius={20} outerRadius={60} fill=\"#8884d8\" >\n                        {dataAccepted.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                    </Pie>\n                    <Legend iconSize={10} layout='horizontal' verticalAlign='bottom' align=\"center\" />\n                </PieChart>\n            </ResponsiveContainer>\n            <p>Soit {pourcentageCandidates}% de candidates et {pourcentageAccepted}% de filles ayant accepté le voeu </p>\n        </div>\n    )\n}\n\nexport default GirlBoyProportion\n","import { useEffect, useState } from 'react'\n\nimport './App.scss'\n\nimport { Helmet } from 'react-helmet'\n\nimport { FormationInfos, Header, MapWrapper } from './components'\nimport { parcoursupAPI } from './global/parcoursupAPI'\nimport axios from 'axios'\n\nfunction App() {\n    // reloa\n    const [selectedSchool, setSelectedSchool] = useState<string | undefined>()\n    const [schoolsData, setSchoolsData] = useState<Record<string, any>[]>([])\n\n    const loadData = async () => {\n        try {\n            let finished = false\n            let dataLength = 0\n            while (!finished)\n            {\n                const requestURL =\n                parcoursupAPI +\n                `&q=&rows=1000&start=${dataLength}&fields=cod_aff_form,g_ea_lib_vx,g_olocalisation_des_formations`\n                const result = await axios.get(requestURL)\n                if (result.data) {\n                    dataLength += result.data.records.length\n                    setSchoolsData(\n                        schoolsData.concat(result.data.records.map((r: { fields: any }) => r.fields))\n                    )\n                }\n\n                finished = true\n            }\n        } catch (e) {\n            console.error('error')\n        }\n    }\n\n    useEffect(() => {\n        loadData()\n    }, [])\n\n    return (\n        <section>\n            <Helmet>\n                <title>Parcoursup - Statistiques</title>\n                <meta\n                    name=\"description\"\n                    content=\"Visualiseur des données publiques de Parcoursup\"\n                />\n            </Helmet>\n            <Header />\n            <section className=\"pcs-main-section\">\n                <MapWrapper schoolsData={schoolsData} dataAttribution={''} />\n                <FormationInfos />\n            </section>\n        </section>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}