{"version":3,"sources":["components/Header/Header.tsx","assets/marker.svg","components/MapWrapper/clusterLayer.ts","components/MapWrapper/clusterSource.ts","components/MapWrapper/rasterLayer.ts","utils/pickRandomItem.ts","global/parcoursupAPI.ts","utils/loadFormationData.ts","utils/getField.ts","utils/openLink.ts","global/moduleNames.ts","utils/loadFormations.ts","utils/calculateDistance.ts","utils/toRad.ts","components/MapWrapper/loadFeatures.ts","components/MapWrapper/MapWrapper.tsx","utils/clickMap.ts","components/GirlBoyProportion/GirlBoyProportion.tsx","components/CompareGirlBoyProportion/CompareGirlBoyProportion.tsx","components/FunnelCandidates/FunnelCandidates.tsx","components/StatsCard/StatsCard.tsx","components/BaccalaureatMention/BaccalaureatMention.tsx","components/FillingSpeed/FillingSpeed.tsx","components/About/About.tsx","components/SearchBar/SearchBar.tsx","components/DistributionCandidates/DistributionCandidates.tsx","components/FormationList/FormationList.tsx","components/FormationItem/FormationItem.tsx","views/FormationInfos/FormationInfos.tsx","views/FindFormation/FindFormation.tsx","views/CompareFormations/CompareFormations.tsx","utils/generateFormationName.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","currentView","setView","views","label","value","icon","className","map","view","index","onClick","clusterLayer","clusterSource","styleCache","VectorLayer","source","style","feature","size","get","length","formationName","getProperties","Style","image","Icon","src","markerIcon","color","anchor","scale","text","Text","offsetY","Circle","radius","stroke","Stroke","fill","Fill","toString","Cluster","distance","minDistance","rasterLayer","TileLayer","maxZoom","XYZ","url","attributions","Math","floor","random","parcoursupAPI","loadFormationData","code_formation","a","requestURL","axios","result","data","nhits","records","fields","getField","formation","fieldName","undefined","openLink","win","window","open","focus","moduleNames","loadFormations","state","query","r","console","error","calculateDistance","coordA","coordB","Infinity","dLat","toRad","dLon","lat1","lat2","sin","cos","atan2","sqrt","PI","loadFeatures","formationsData","features","filter","entry","coord","realCoord","Array","from","reverse","feat","Feature","geometry","Point","transform","setProperties","clear","addFeatures","getView","fit","getExtent","padding","MapWrapper","useState","setMap","setSource","mapElement","useRef","useEffect","new_source","VectorSource","initialMap","Map","target","current","layers","View","projection","center","zoom","controls","addEventListener","e","evt","setSelectedFormationID","setCoordProximity","forEachFeatureAtPixel","pixel","f","push","coordinate","properties","clickMap","setSelectedFormation","ref","GirlBoyProportion","dataCandidats","key","count_candidat_girls","count_candidat_boys","dataAccepted","count_accepted_girls","count_accepted_boys","pourcentageCandidates","toFixed","pourcentageAccepted","description","title","ResponsiveContainer","width","height","PieChart","Pie","startAngle","endAngle","isAnimationActive","dataKey","nameKey","cx","cy","innerRadius","outerRadius","LabelList","position","Legend","iconSize","layout","verticalAlign","align","CompareGirlBoyProportion","createLabel","pourcentage","computedData","nbCandidates","count_candidates_boys_pct","count_candidates_girls_pct","nbAccepted","count_accepted_boys_pct","count_accepted_girls_pct","label_candidates_boys","label_candidates_girls","label_accepted_boys","label_accepted_girls","BarChart","CartesianGrid","strokeDasharray","XAxis","YAxis","Tooltip","Bar","stackId","name","FunnelCandidates","count_classed","count_proposition_accepted","count_proposition_received","count_candidates","val","FunnelChart","Funnel","offset","StatsCard","children","BaccalaureatMention","count_ab","count_b","count_nr","count_sm","count_tb","count_tbf","labelLine","fontSize","strokeWidth","FillingSpeed","count_bac","count_end_pp","count_start_pp","renderLabel","Number","isFinite","legend","textAlign","AreaChart","margin","top","left","right","bottom","angle","type","interval","Area","About","setOpen","m","SearchBar","currentQuery","setValue","onChange","placeholder","onKeyPress","DistributionCandidates","count_bg","count_bt","count_bp","count_oc","FormationList","coordProximity","checkEntryAsCoord","Object","keys","includes","hasKey","isArray","sort","b","formationData","FormationItem","handleClick","FormationInfos","currentFormation","toggleComparedFormation","comparedFormations","formationID","s","renderRankLastCalled","grpNumber","rank","groupLabel","group","Helmet","renderSameAcademy","renderSameFormation","renderBoursier","FindFormation","dataAttribution","CompareFormations","loadFormation","girlBoyProportionData","count_candidates_boys","count_candidates_girls","App","setCurrentView","selectedFormation","setComparedFormations","setFormationsData","allFormationsData","setAllFormationsData","formationsCache","setFormationCache","newFormation","handlerSetSelectedFormation","setCurrentQuery","currentQueryState","setCurrentQueryState","loadDataFromQuery","queryState","responseResult","responseQueryState","urlParams","URLSearchParams","location","search","q","c","ids","split","loadComparedFormationsFromParam","forEach","id","concat","content","renderView","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df3dd5dd.chunk.js","sourcesContent":["import './Header.scss'\n\nimport { MdSearch, MdBarChart } from 'react-icons/md'\nimport { FaSchool } from 'react-icons/fa'\n\nexport interface HeaderProps {\n    currentView: string\n    setView: (newView: string) => void\n}\n\nconst Header = (props: HeaderProps) => {\n    const { currentView, setView } = props\n\n    const views = [\n        {\n            label: 'Formation',\n            value: 'seeFormationInfos',\n            icon: <FaSchool className=\"pcs-header-view-button-icon-content\" />,\n        },\n        {\n            label: 'Rechercher',\n            value: 'findFormation',\n            icon: <MdSearch className=\"pcs-header-view-button-icon-content\" />,\n        },\n        {\n            label: 'Comparer',\n            value: 'compareFormations',\n            icon: (\n                <MdBarChart className=\"pcs-header-view-button-icon-content\" />\n            ),\n        },\n    ]\n\n    const renderViewButtons = () => {\n        return views.map((view, index) => (\n            <div\n                key={index}\n                onClick={() => setView(view.value)}\n                className={`pcs-header-view-button ${\n                    currentView === view.value ? 'active' : ''\n                }`}\n            >\n                <div className=\"pcs-header-view-button-icon\">{view.icon}</div>\n                <div className=\"pcs-header-view-button-name\">{view.label}</div>\n            </div>\n        ))\n    }\n    return (\n        <div className=\"pcs-header\">\n            <div className=\"pcs-header-head\">\n                <h1 className=\"pcs-header-title\">\n                    📊 Statistiques sur Parcoursup\n                </h1>\n            </div>\n            <div className=\"pcs-header-menu\">{renderViewButtons()}</div>\n        </div>\n    )\n}\n\nexport default Header\n","export default __webpack_public_path__ + \"static/media/marker.7a162fbb.svg\";","import VectorLayer from 'ol/layer/Vector'\nimport Fill from 'ol/style/Fill'\nimport Circle from 'ol/style/Circle'\nimport Stroke from 'ol/style/Stroke'\nimport Text from 'ol/style/Text'\nimport Icon from 'ol/style/Icon'\nimport Style from 'ol/style/Style'\nimport markerIcon from '../../assets/marker.svg'\n\nconst clusterLayer = (clusterSource: any) => {\n    const styleCache: Record<string, Style[]> = {}\n    return new VectorLayer({\n        source: clusterSource,\n        style: (feature) => {\n            const size = feature.get('features').length\n            let style = styleCache[size]\n            if (!style || size === 1) {\n                if (size === 1) {\n                    const formationName = feature\n                        .get('features')[0]\n                        .getProperties()['g_ea_lib_vx']\n                    style = [\n                        new Style({\n                            image: new Icon({\n                                src: markerIcon,\n                                color: '#e63946',\n                                anchor: [0.5, 1],\n                                scale: 0.5,\n                            }),\n                            text: new Text({\n                                text: formationName,\n                                offsetY: 10,\n                            }),\n                        }),\n                    ]\n                } else {\n                    style = [\n                        new Style({\n                            image: new Circle({\n                                radius: 15,\n                                stroke: new Stroke({\n                                    color: '#e63946',\n                                }),\n                                fill: new Fill({\n                                    color: '#0e2950',\n                                }),\n                            }),\n                            text: new Text({\n                                text: size.toString(),\n                                fill: new Fill({\n                                    color: '#fff',\n                                }),\n                            }),\n                        }),\n                    ]\n                }\n                styleCache[size] = style\n            }\n            return style\n        },\n    })\n}\n\nexport default clusterLayer\n","import Geometry from 'ol/geom/Geometry'\nimport { Cluster, Vector as VectorSource } from 'ol/source'\n\nconst clusterSource = (source: VectorSource<Geometry>) => {\n    return new Cluster({\n        distance: 40,\n        minDistance: 20,\n        source: source,\n    })\n}\n\nexport default clusterSource\n","import TileLayer from 'ol/layer/Tile'\nimport XYZ from 'ol/source/XYZ'\n\nexport const rasterLayer = () => {\n    return new TileLayer({\n        maxZoom: 19,\n        source: new XYZ({\n            url: 'https://cartodb-basemaps-a.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png',\n            attributions: 'carto.com',\n        }),\n    })\n}\n\nexport default rasterLayer\n","const { floor, random } = Math\n\nexport const pickRandomItem = <T = any>(items: T[]) => {\n    return items[floor(random() * items.length)]\n}\n","export const parcoursupAPI =\n    'https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup'\n","import axios from 'axios'\nimport { parcoursupAPI } from 'global/parcoursupAPI'\n\nexport const loadFormationData = async (code_formation: string) => {\n    try {\n        const requestURL =\n            parcoursupAPI + `&q=cod_aff_form%3D\"${code_formation}\"`\n        const result = await axios.get(requestURL)\n        if (result.data && result.data.nhits === 1) {\n            return result.data.records[0].fields\n        }\n        return {}\n    } catch (e) {\n        return {}\n    }\n}\n","export const getField = (formation: Record<string, any>, fieldName: string) => {\n    if (formation[fieldName] !== undefined) return formation[fieldName]\n    return 'NaN'\n}\n","export const openLink = (url: string) => {\n    const win = window.open(url, '_blank')\n    if (win) win.focus()\n}\n","export const moduleNames = [\n    'axios',\n    'html2canvas',\n    'ol',\n    'react',\n    'react-dom',\n    'react-helmet',\n    'react-icons',\n    'react-scripts',\n    'recharts',\n    'sass',\n    'use-react-screenshot',\n]\n","import axios from 'axios'\nimport { parcoursupAPI } from 'global'\n\nexport const loadFormations = async (\n    state: number,\n    query?: string\n): Promise<[Record<string, any>[], number]> => {\n    try {\n        const requestURL =\n            parcoursupAPI +\n            `&q=${\n                query ?? ''\n            }&rows=-1&fields=cod_aff_form,g_ea_lib_vx,g_olocalisation_des_formations,fil_lib_voe_acc,detail_forma`\n        const result = await axios.get(requestURL)\n        if (result.data)\n            return [\n                result.data.records.map((r: { fields: any }) => r.fields),\n                state,\n            ]\n        return [[], state]\n    } catch (e) {\n        console.error('error when loading Parcoursup data...')\n        return [[], state]\n    }\n}\n","import { toRad } from 'utils'\n\nexport const calculateDistance = (\n    coordA: number[] | undefined,\n    coordB: number[] | undefined\n) => {\n    if (!coordA || !coordB) return Infinity\n    const R = 6371 // km\n    const dLat = toRad(coordB[0] - coordA[0])\n    const dLon = toRad(coordB[1] - coordA[1])\n    const lat1 = toRad(coordA[0])\n    const lat2 = toRad(coordB[0])\n\n    const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.sin(dLon / 2) *\n            Math.sin(dLon / 2) *\n            Math.cos(lat1) *\n            Math.cos(lat2)\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    const d = R * c\n    return d\n}\n","export const toRad = (value: number) => {\n    return (value * Math.PI) / 180\n}\n","import { Feature, Map } from 'ol'\nimport Geometry from 'ol/geom/Geometry'\nimport Point from 'ol/geom/Point'\nimport { transform } from 'ol/proj'\nimport VectorSource from 'ol/source/Vector'\n\nexport const loadFeatures = (\n    source: VectorSource<Geometry>,\n    map: Map,\n    formationsData: Record<string, any>[]\n) => {\n    const features = formationsData\n        .filter((entry) => {\n            return entry['g_olocalisation_des_formations'] !== undefined\n        })\n        .map((entry) => {\n            const coord = entry['g_olocalisation_des_formations']\n            const realCoord = Array.from(coord).reverse() as number[]\n            const feat = new Feature({\n                geometry: new Point(\n                    transform(realCoord, 'EPSG:4326', 'EPSG:3857')\n                ),\n            })\n            feat.setProperties({ ...entry })\n            return feat\n        })\n\n    if (!features) return\n    source.clear()\n    source.addFeatures(features)\n    if (!map) return\n    map.getView().fit(source.getExtent(), {\n        padding: [100, 100, 100, 100],\n    })\n}\n","import { useState, useRef, useEffect, RefObject } from 'react'\n\nimport './MapWrapper.scss'\n\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport VectorSource from 'ol/source/Vector'\nimport Geometry from 'ol/geom/Geometry'\nimport { MapBrowserEvent } from 'ol'\n\nimport clusterLayer from './clusterLayer'\nimport clusterSource from './clusterSource'\nimport rasterLayer from './rasterLayer'\nimport { clickMap } from 'utils'\nimport { loadFeatures } from './loadFeatures'\n\nexport interface MapWrapperProps {\n    formationsData: Record<string, any>[]\n    setSelectedFormation: (formationID: string) => Promise<void>\n    dataAttribution: string\n    setCoordProximity: (coord: number[]) => void\n}\n\nconst MapWrapper = (props: MapWrapperProps) => {\n    const [map, setMap] = useState<Map>()\n    const [source, setSource] = useState<VectorSource<Geometry>>()\n\n    const mapElement = useRef() as RefObject<HTMLDivElement>\n\n    useEffect(() => {\n        const new_source = new VectorSource()\n\n        const initialMap = new Map({\n            target: mapElement.current ?? undefined,\n            layers: [rasterLayer(), clusterLayer(clusterSource(new_source))],\n            view: new View({\n                projection: 'EPSG:3857',\n                center: [0, 0],\n                zoom: 2,\n            }),\n            controls: [],\n        })\n\n        initialMap.addEventListener('singleclick', (e) =>\n            clickMap(\n                e as MapBrowserEvent<UIEvent>,\n                initialMap,\n                props.setSelectedFormation,\n                props.setCoordProximity\n            )\n        )\n        // save map and vector layer references to state\n        setMap(initialMap)\n        setSource(new_source)\n        if (props.formationsData.length)\n            loadFeatures(new_source, initialMap, props.formationsData)\n    }, [])\n\n    useEffect(() => {\n        if (!source || !map || props.formationsData.length === 0) return\n        loadFeatures(source, map, props.formationsData)\n    }, [props.formationsData])\n\n    return (\n        <div className=\"pcs-map-fragment\">\n            <div className=\"pcs-map-container\">\n                <div ref={mapElement} className=\"pcs-map\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default MapWrapper\n","import { Map, MapBrowserEvent } from 'ol'\nimport { transform } from 'ol/proj'\n\nexport const clickMap = (\n    evt: MapBrowserEvent<UIEvent>,\n    map: Map,\n    setSelectedFormationID: (id: string) => void,\n    setCoordProximity: (coord: number[]) => void\n) => {\n    const features: any[] = []\n    map.forEachFeatureAtPixel(evt.pixel, (f: any) => features.push(f))\n    const coord = evt.coordinate\n    setCoordProximity(transform(coord, 'EPSG:3857', 'EPSG:4326'))\n    if (features.length !== 1) return\n    if (features[0].getProperties().features.length !== 1) return\n    const properties = features[0].getProperties().features[0].getProperties()\n    if (properties['cod_aff_form'])\n        setSelectedFormationID(properties['cod_aff_form'])\n}\n","import { StatsCard } from 'components'\nimport { ResponsiveContainer, PieChart, Pie, Legend, LabelList } from 'recharts'\n\nexport interface GirlBoyProportionProps {\n    count_candidat_boys: number\n    count_candidat_girls: number\n    count_accepted_boys: number\n    count_accepted_girls: number\n    title: string\n}\n\nconst GirlBoyProportion = (props: GirlBoyProportionProps) => {\n    const dataCandidats = [\n        {\n            key: 'Nombre de candidates',\n            value: props.count_candidat_girls,\n            fill: '#e63946',\n        },\n        {\n            key: 'Nombre de candidats',\n            value: props.count_candidat_boys,\n            fill: '#a8dadc',\n        },\n    ]\n\n    const dataAccepted = [\n        {\n            key: \"Nombre d'acceptées\",\n            value: props.count_accepted_girls,\n            fill: '#6b6fdb',\n        },\n        {\n            key: \"Nombre d'acceptés\",\n            value: props.count_accepted_boys,\n            fill: '#76d169',\n        },\n    ]\n\n    const pourcentageCandidates = (\n        (props.count_candidat_girls /\n            (props.count_candidat_girls + props.count_candidat_boys)) *\n        100\n    ).toFixed(0)\n    const pourcentageAccepted = (\n        (props.count_accepted_girls /\n            (props.count_accepted_girls + props.count_accepted_boys)) *\n        100\n    ).toFixed(0)\n    const description = `Soit ${pourcentageCandidates}% de candidates et ${pourcentageAccepted}% ayant accepté définitivement la proposition`\n\n    return (\n        <StatsCard title={props.title} description={description}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                    <Pie\n                        data={dataCandidats}\n                        startAngle={0}\n                        endAngle={180}\n                        isAnimationActive={false}\n                        dataKey=\"value\"\n                        nameKey=\"key\"\n                        cx=\"50%\"\n                        cy=\"100%\"\n                        innerRadius={80}\n                        outerRadius={120}\n                    >\n                        <LabelList\n                            position=\"insideTop\"\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"value\"\n                        />\n                    </Pie>\n\n                    <Pie\n                        data={dataAccepted}\n                        isAnimationActive={false}\n                        startAngle={0}\n                        endAngle={180}\n                        dataKey=\"value\"\n                        nameKey=\"key\"\n                        cx=\"50%\"\n                        cy=\"100%\"\n                        innerRadius={20}\n                        outerRadius={60}\n                    >\n                        <LabelList\n                            position=\"inside\"\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"value\"\n                        />\n                    </Pie>\n                    <Legend\n                        iconSize={10}\n                        layout=\"horizontal\"\n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                    />\n                </PieChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default GirlBoyProportion\n","import { StatsCard } from 'components'\nimport {\n    ResponsiveContainer,\n    Legend,\n    Bar,\n    BarChart,\n    CartesianGrid,\n    Tooltip,\n    XAxis,\n    YAxis,\n    LabelList,\n} from 'recharts'\n\nexport interface CompareGirlBoyProportionProps {\n    data: Record<string, any>[]\n    title: string\n}\n\nconst CompareGirlBoyProportion = (props: CompareGirlBoyProportionProps) => {\n    const { data } = props\n\n    const createLabel = (value: number, pourcentage: number | string) => {\n        return `${pourcentage}% (${value})`\n    }\n\n    const computedData = data.map((entry) => {\n        const nbCandidates =\n            entry['count_candidates_boys'] + entry['count_candidates_girls']\n        const count_candidates_boys_pct = (\n            (entry['count_candidates_boys'] / nbCandidates) *\n            100\n        ).toFixed(0)\n        const count_candidates_girls_pct = (\n            (entry['count_candidates_girls'] / nbCandidates) *\n            100\n        ).toFixed(0)\n        const nbAccepted =\n            entry['count_accepted_boys'] + entry['count_accepted_girls']\n        const count_accepted_boys_pct = (\n            (entry['count_accepted_boys'] / nbAccepted) *\n            100\n        ).toFixed(0)\n        const count_accepted_girls_pct = (\n            (entry['count_accepted_girls'] / nbAccepted) *\n            100\n        ).toFixed(0)\n\n        return {\n            count_candidates_boys_pct,\n            count_candidates_girls_pct,\n            count_accepted_boys_pct,\n            count_accepted_girls_pct,\n            label_candidates_boys: createLabel(\n                entry['count_candidates_boys'],\n                count_candidates_boys_pct\n            ),\n            label_candidates_girls: createLabel(\n                entry['count_candidates_girls'],\n                count_candidates_girls_pct\n            ),\n            label_accepted_boys: createLabel(\n                entry['count_accepted_boys'],\n                count_accepted_boys_pct\n            ),\n            label_accepted_girls: createLabel(\n                entry['count_accepted_girls'],\n                count_accepted_girls_pct\n            ),\n            ...entry,\n        }\n    })\n\n    return (\n        <StatsCard title={props.title}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <BarChart data={computedData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"formationName\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend\n                        iconSize={10}\n                        layout=\"horizontal\"\n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                    />\n\n                    <Bar\n                        isAnimationActive={false}\n                        dataKey=\"count_candidates_boys_pct\"\n                        stackId=\"a\"\n                        fill=\"#a8dadc\"\n                        name=\"% de candidats\"\n                    >\n                        <LabelList\n                            position=\"middle\"\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"label_candidates_boys\"\n                        />\n                    </Bar>\n                    <Bar\n                        isAnimationActive={false}\n                        dataKey=\"count_candidates_girls_pct\"\n                        stackId=\"a\"\n                        fill=\"#e63946\"\n                        name=\"% de candidates\"\n                    >\n                        <LabelList\n                            position=\"middle\"\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"label_candidates_girls\"\n                        />\n                    </Bar>\n                    <Bar\n                        isAnimationActive={false}\n                        dataKey=\"count_accepted_boys_pct\"\n                        stackId=\"b\"\n                        fill=\"#76d169\"\n                        name=\"% d'acceptés\"\n                    >\n                        <LabelList\n                            position=\"middle\"\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"label_accepted_boys\"\n                        />\n                    </Bar>\n                    <Bar\n                        isAnimationActive={false}\n                        dataKey=\"count_accepted_girls_pct\"\n                        stackId=\"b\"\n                        fill=\"#6b6fdb\"\n                        name=\"% d'acceptées\"\n                    >\n                        <LabelList\n                            position=\"middle\"\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"label_accepted_girls\"\n                        />\n                    </Bar>\n                </BarChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default CompareGirlBoyProportion\n","import { StatsCard } from 'components'\nimport { ResponsiveContainer, Funnel, FunnelChart, LabelList } from 'recharts'\n\nexport interface FunnelCandidatesProps {\n    count_candidates: number\n    count_classed: number\n    count_proposition_received: number\n    count_proposition_accepted: number\n    title: string\n}\n\nconst FunnelCandidates = (props: FunnelCandidatesProps) => {\n    const {\n        title,\n        count_classed,\n        count_proposition_accepted,\n        count_proposition_received,\n        count_candidates,\n    } = props\n    const createLabel = (val: number, description: string): string => {\n        return `${val} ${description} (${(\n            (val / count_candidates) *\n            100\n        ).toFixed(0)}%)`\n    }\n\n    const data = [\n        {\n            name: 'Nombre de candidats',\n            value: count_candidates,\n            fill: '#e63946',\n            label: createLabel(count_candidates, 'candidat.e.s'),\n        },\n        {\n            name: 'Nombre de candidats classés',\n            value: count_classed,\n            fill: '#a8dadc',\n            label: createLabel(count_classed, 'classé.e.s'),\n        },\n        {\n            name: 'Nombre de candidats ayant recu une proposition',\n            value: count_proposition_received,\n            fill: '#457b9d',\n            label: createLabel(count_proposition_received, 'admis.e.s'),\n        },\n        {\n            name: 'Nombre de candidats ayant accepté la proposition',\n            value: count_proposition_accepted,\n            fill: '#0e2950',\n            label: createLabel(count_proposition_accepted, 'ont accepté'),\n        },\n    ]\n\n    return (\n        <StatsCard title={title}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <FunnelChart>\n                    <Funnel\n                        dataKey=\"value\"\n                        data={data}\n                        isAnimationActive={false}\n                    >\n                        <LabelList\n                            position=\"insideTopLeft\"\n                            offset={10}\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"label\"\n                        />\n                    </Funnel>\n                </FunnelChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default FunnelCandidates\n","import './StatsCard.scss'\nexport interface StatsCardProps {\n    children: JSX.Element\n    title: string\n    description?: string | JSX.Element\n}\n\nconst StatsCard = (props: StatsCardProps) => {\n    const { children, title, description } = props\n\n    return (\n        <div className=\"pcs-statscard\">\n            <h1 className=\"pcs-statscard-title\">{title}</h1>\n            <div className=\"pcs-statscard-content\">\n                {children}\n                {description && (\n                    <div className=\"pcs-statscard-description\">\n                        {description}\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default StatsCard\n","import { StatsCard } from 'components'\nimport { ResponsiveContainer, Pie, PieChart, Legend, LabelList } from 'recharts'\n\nexport interface BaccalaureatMentionProps {\n    count_tbf: number\n    count_tb: number\n    count_b: number\n    count_ab: number\n    count_sm: number\n    count_nr: number\n    title: string\n}\n\nconst BaccalaureatMention = (props: BaccalaureatMentionProps) => {\n    const {\n        title,\n        count_ab,\n        count_b,\n        count_nr,\n        count_sm,\n        count_tb,\n        count_tbf,\n    } = props\n\n    const total =\n        count_ab + count_b + count_nr + count_sm + count_tb + count_tbf\n\n    const createLabel = (val: number): string => {\n        if (!val) return ''\n        return `${val}` // (${((val / total) * 100).toFixed(0)}%)`\n    }\n\n    const data = [\n        {\n            name: 'Très bien (avec félicitations)',\n            value: count_tbf,\n            fill: '#a639d6',\n            label: createLabel(count_tbf),\n        },\n        {\n            name: 'Très bien',\n            value: count_tb,\n            fill: '#e63946',\n            label: createLabel(count_tb),\n        },\n        {\n            name: 'Bien',\n            value: count_b,\n            fill: '#a8dadc',\n            label: createLabel(count_b),\n        },\n        {\n            name: 'Assez bien',\n            value: count_ab,\n            fill: '#457b9d',\n            label: createLabel(count_ab),\n        },\n        {\n            name: 'Sans mention',\n            value: count_sm,\n            fill: '#0e2950',\n            label: createLabel(count_sm),\n        },\n        {\n            name: 'Non référencé',\n            value: count_nr,\n            fill: '#2e2e2e',\n            label: createLabel(count_nr),\n        },\n    ]\n\n    return (\n        <StatsCard title={title}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                    <Pie\n                        data={data}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        isAnimationActive={false}\n                        innerRadius={40}\n                        outerRadius={80}\n                        dataKey=\"value\"\n                        labelLine={false}\n                    >\n                        <LabelList\n                            position=\"outside\"\n                            fontSize={20}\n                            offset={6}\n                            fill=\"#000\"\n                            stroke=\"#000\"\n                            strokeWidth={1}\n                            dataKey=\"label\"\n                        />\n                    </Pie>\n                    <Legend\n                        iconSize={10}\n                        layout=\"horizontal\"\n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                    />\n                </PieChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default BaccalaureatMention\n","import { StatsCard } from 'components'\nimport {\n    ResponsiveContainer,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    AreaChart,\n    Area,\n    LabelList,\n} from 'recharts'\n\nexport interface FillingSpeedProps {\n    count_start_pp: number\n    count_bac: number\n    count_end_pp: number\n    title: string\n}\n\nconst FillingSpeed = (props: FillingSpeedProps) => {\n    const { title, count_bac, count_end_pp, count_start_pp } = props\n\n    const renderLabel = (value: number): string =>\n        Number.isFinite(value) ? `${value.toFixed(0)}%` : ''\n\n    const data = [\n        {\n            name: '27 mai',\n            value: count_start_pp,\n            label: renderLabel(count_start_pp),\n        },\n        {\n            name: '17 juin',\n            value: count_bac,\n            label: renderLabel(count_bac),\n        },\n        {\n            name: '16 juillet',\n            value: count_end_pp,\n            label: renderLabel(count_end_pp),\n        },\n    ]\n\n    const legend = (\n        <ul style={{ textAlign: 'left' }}>\n            <li>27 mai : ouverture de Parcoursup</li>\n            <li>17 juin : avant le baccalauréat</li>\n            <li>16 juillet : fin de procédure Phase Principale</li>\n        </ul>\n    )\n\n    return (\n        <StatsCard title={title} description={legend}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <AreaChart\n                    data={data}\n                    margin={{ top: 20, left: 0, right: 40, bottom: 0 }}\n                >\n                    <XAxis\n                        dataKey=\"name\"\n                        angle={-30}\n                        type=\"category\"\n                        interval={0}\n                    />\n                    <YAxis />\n                    <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\n                    <Area\n                        type=\"linear\"\n                        dataKey=\"value\"\n                        stroke=\"#0e2950\"\n                        fill=\"#0e2950\"\n                        isAnimationActive={false}\n                    >\n                        <LabelList\n                            position=\"insideTop\"\n                            fill=\"#000\"\n                            stroke=\"#000\"\n                            strokeWidth={1}\n                            dataKey=\"label\"\n                        />\n                    </Area>\n                </AreaChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default FillingSpeed\n","import { moduleNames } from 'global'\nimport { useState } from 'react'\nimport { openLink } from 'utils'\nimport './About.scss'\n\nconst About = () => {\n    const [open, setOpen] = useState<boolean>(false)\n\n    const renderModules = () => {\n        return moduleNames.map((m) => (\n            <li onClick={() => openLink(`https://www.npmjs.com/package/${m}`)}>\n                {m}\n            </li>\n        ))\n    }\n    if (!open)\n        return (\n            <div className=\"pcs-about-closed\">\n                <div>Session 2021</div>\n                <div className=\"pcs-about-button\" onClick={() => setOpen(true)}>\n                    A propos\n                </div>\n            </div>\n        )\n    return (\n        <div className=\"pcs-about-open\">\n            <div className=\"pcs-about-close\">\n                <span onClick={() => setOpen(false)}>fermer</span>\n            </div>\n            <div className=\"pcs-about-made-by\">\n                Application développée par Stéphane BRANLY\n            </div>\n            <div className=\"pcs-about-tags\">\n                <div\n                    className=\"pcs-about-repo\"\n                    onClick={() =>\n                        openLink(\n                            'https://github.com/StephaneBranly/parcoursup-stats'\n                        )\n                    }\n                >\n                    Dépot de code 💻\n                </div>\n                <div\n                    className=\"pcs-about-sponsor\"\n                    onClick={() =>\n                        openLink(\n                            'https://www.paypal.com/paypalme/StephaneBranly'\n                        )\n                    }\n                >\n                    Sponsor 💜\n                </div>\n                <div\n                    className=\"pcs-about-data\"\n                    onClick={() =>\n                        openLink(\n                            'https://data.enseignementsup-recherche.gouv.fr/pages/parcoursupdata/?disjunctive.fili'\n                        )\n                    }\n                >\n                    Données publiques 🗃\n                </div>\n            </div>\n            <div className=\"pcs-about-packages\">\n                <div className=\"pcs-about-packages-label\">\n                    Modules utilisés 📦 :\n                </div>\n                <ul>{renderModules()}</ul>\n            </div>\n        </div>\n    )\n}\n\nexport default About\n","import { useState } from 'react'\nimport { MdSearch } from 'react-icons/md'\nimport './SearchBar.scss'\n\nexport interface SearchBarProps {\n    loadFormations: (query?: string) => void\n    currentQuery: string\n}\n\nconst SearchBar = (props: SearchBarProps) => {\n    const { loadFormations, currentQuery } = props\n\n    const [value, setValue] = useState<string>(currentQuery)\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            loadFormations(value)\n        }\n    }\n\n    return (\n        <div className=\"pcs-searchbar\">\n            <input\n                value={value}\n                onChange={(e) => setValue(e.target.value)}\n                className=\"pcs-searchbar-input\"\n                type=\"text\"\n                placeholder=\"Rechercher\"\n                onKeyPress={handleKeyDown}\n            />\n            <MdSearch\n                className=\"pcs-searchbar-button\"\n                onClick={() => loadFormations(value)}\n            />\n        </div>\n    )\n}\n\nexport default SearchBar\n","import { StatsCard } from 'components'\nimport { ResponsiveContainer, Pie, PieChart, Legend, LabelList } from 'recharts'\n\nexport interface DistributionCandidatesProps {\n    count_bg: number\n    count_bt: number\n    count_bp: number\n    count_oc: number\n    title: string\n}\n\nconst DistributionCandidates = (props: DistributionCandidatesProps) => {\n    const { title, count_bg, count_bt, count_bp, count_oc } = props\n\n    const createLabel = (val: number): string => {\n        if (!val) return ''\n        return `${val}` // (${((val / total) * 100).toFixed(0)}%)`\n    }\n\n    const data = [\n        {\n            name: 'Néobachelier.e.s généraux',\n            value: count_bg,\n            fill: '#e63946',\n            label: createLabel(count_bg),\n        },\n        {\n            name: 'Néobachelier.e.s technologiques',\n            value: count_bt,\n            fill: '#a8dadc',\n            label: createLabel(count_bt),\n        },\n        {\n            name: 'Néobachelier.e.s profressionnel.le.s',\n            value: count_bp,\n            fill: '#457b9d',\n            label: createLabel(count_bp),\n        },\n        {\n            name: 'Autres candidat.e.s',\n            value: count_oc,\n            fill: '#0e2950',\n            label: createLabel(count_oc),\n        },\n    ]\n\n    return (\n        <StatsCard title={title}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                    <Pie\n                        data={data}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        isAnimationActive={false}\n                        innerRadius={40}\n                        outerRadius={80}\n                        dataKey=\"value\"\n                        labelLine={false}\n                    >\n                        <LabelList\n                            position=\"outside\"\n                            fontSize={20}\n                            offset={6}\n                            fill=\"#000\"\n                            stroke=\"#000\"\n                            strokeWidth={1}\n                            dataKey=\"label\"\n                        />\n                    </Pie>\n                    <Legend\n                        iconSize={10}\n                        layout=\"horizontal\"\n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                    />\n                </PieChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default DistributionCandidates\n","import { FormationItem } from 'components'\nimport { calculateDistance } from 'utils'\nimport './FormationList.scss'\n\nexport interface FormationListProps {\n    formationsData: Record<string, any>[]\n    setSelectedFormation: (formationID: string) => Promise<void>\n    setView: (view: string) => void\n    coordProximity: number[]\n}\n\nconst FormationList = (props: FormationListProps) => {\n    const { formationsData, setSelectedFormation, setView, coordProximity } =\n        props\n\n    const hasKey = (entry: Record<string, any>, key: string): boolean => {\n        return Object.keys(entry).includes(key)\n    }\n\n    const checkEntryAsCoord = (entry: Record<string, any>): boolean => {\n        return (\n            hasKey(entry, 'g_olocalisation_des_formations') &&\n            Array.isArray(entry['g_olocalisation_des_formations'])\n        )\n    }\n\n    const renderListItems = () => {\n        if (coordProximity.length === 2)\n            return formationsData\n                .sort((a, b) =>\n                    checkEntryAsCoord(a) &&\n                    checkEntryAsCoord(b) &&\n                    calculateDistance(\n                        Array.from(\n                            a['g_olocalisation_des_formations']\n                        ).reverse() as number[],\n                        coordProximity\n                    ) <\n                        calculateDistance(\n                            Array.from(\n                                b['g_olocalisation_des_formations']\n                            ).reverse() as number[],\n                            coordProximity\n                        )\n                        ? -1\n                        : 1\n                )\n                .map((formation, index) => (\n                    <FormationItem\n                        setSelectedFormation={setSelectedFormation}\n                        setView={setView}\n                        key={index}\n                        formationData={formation}\n                    />\n                ))\n        else\n            return formationsData.map((formation, index) => (\n                <FormationItem\n                    setSelectedFormation={setSelectedFormation}\n                    setView={setView}\n                    key={index}\n                    formationData={formation}\n                />\n            ))\n    }\n\n    return (\n        <div className=\"pcs-formationList-fragment\">\n            <ul className=\"pcs-formationList-list\">{renderListItems()}</ul>\n        </div>\n    )\n}\n\nexport default FormationList\n","import { getField } from 'utils'\nimport './FormationItem.scss'\n\nexport interface FormationItemProps {\n    formationData: Record<string, any>\n    setSelectedFormation: (formationID: string) => Promise<void>\n    setView: (view: string) => void\n}\n\nconst FormationItem = (props: FormationItemProps) => {\n    const { formationData, setSelectedFormation, setView } = props\n\n    const handleClick = async () => {\n        await setSelectedFormation(formationData['cod_aff_form'])\n        setView('seeFormationInfos')\n    }\n\n    return (\n        <li className=\"pcs-formationItem\" onClick={handleClick}>\n            <b>{getField(formationData, 'fil_lib_voe_acc')}</b> -{' '}\n            {getField(formationData, 'g_ea_lib_vx')}{' '}\n            {getField(formationData, 'detail_forma') !== 'NaN' ? (\n                <em>- {getField(formationData, 'detail_forma')}</em>\n            ) : (\n                ''\n            )}\n        </li>\n    )\n}\n\nexport default FormationItem\n","import {\n    BaccalaureatMention,\n    DistributionCandidates,\n    FillingSpeed,\n    FunnelCandidates,\n    GirlBoyProportion,\n} from 'components'\nimport { Helmet } from 'react-helmet'\nimport { getField } from 'utils'\nimport './FormationInfos.scss'\n\nexport interface FormationInfosProps {\n    currentFormation: Record<string, any> | undefined\n    setView: (view: string) => void\n    toggleComparedFormation: (formationID: string) => void\n    comparedFormations: string[]\n    formationID: string\n}\n\nconst FormationInfos = (props: FormationInfosProps) => {\n    const {\n        currentFormation,\n        setView,\n        toggleComparedFormation,\n        comparedFormations,\n        formationID,\n    } = props\n    const s = currentFormation\n\n    const renderRankLastCalled = () => {\n        if (!s) return\n        return [1, 2, 3, 4, 5]\n            .map((grpNumber: number) => {\n                const rank = getField(s, `ran_grp${grpNumber}`)\n                const groupLabel = getField(s, `lib_grp${grpNumber}`)\n                return [grpNumber, Number(rank), groupLabel]\n            })\n            .filter(\n                ([index, rank, group]) =>\n                    rank !== 'NaN' &&\n                    rank !== 0 &&\n                    group !== 'NaN' &&\n                    group !== ''\n            )\n            .map(([index, rank, group]) => (\n                <li key={index}>\n                    {group} : <b>{rank}ème</b>\n                </li>\n            ))\n    }\n\n    const renderSameAcademy = () => {\n        if (!s) return\n        if (getField(s, 'pct_aca_orig_idf') === 'NaN') return\n        return (\n            <li>\n                📚 <b>{Number(getField(s, 'pct_aca_orig_idf')).toFixed(0)}%</b>{' '}\n                d'admis.e.s néobachelier.e.s issu.e.s de la même académie\n                (Paris/Crétail/Versailles réunies)\n            </li>\n        )\n    }\n    const renderSameFormation = () => {\n        if (!s) return\n        if (getField(s, 'pct_etab_orig') === 'NaN') return\n        return (\n            <li>\n                🏢 <b>{Number(getField(s, 'pct_etab_orig')).toFixed(0)}%</b>{' '}\n                d'admis.e.s néobachelier.e.s issu.e.s du même établissement\n            </li>\n        )\n    }\n    const renderBoursier = () => {\n        if (!s) return\n        if (getField(s, 'pct_bours') === 'NaN') return\n        return (\n            <li>\n                💶 <b>{Number(getField(s, 'pct_bours')).toFixed(0)}%</b>{' '}\n                d'admis.e.s néobachelier.e.s boursier.e.s\n            </li>\n        )\n    }\n\n    if (!s || Object.keys(s).length === 0)\n        return (\n            <div className=\"pcs-formationinfos-fragment\">\n                <h1 className=\"pcs-formationinfos-title\">\n                    Informations générales\n                </h1>\n                {s && Object.keys(s).length === 0 && (\n                    <div className=\"pcs-formationinfos-main\">\n                        <h1 className=\"pcs-formationname\">\n                            🙁 Nous n'avons pas trouvé la formation d'id{' '}\n                            {formationID}\n                        </h1>\n                    </div>\n                )}\n                <div\n                    className=\"pcs-formationinfos-main clickable\"\n                    onClick={() => setView('findFormation')}\n                >\n                    <h1 className=\"pcs-formationname\">\n                        🔍 Recherchez une formation pour visualiser ses\n                        informations\n                    </h1>\n                </div>\n            </div>\n        )\n    return (\n        <div className=\"pcs-formationinfos-fragment\">\n            <Helmet>\n                <title>\n                    Parcoursup - Statistiques - {getField(s, 'g_ea_lib_vx')} -{' '}\n                    {getField(s, 'fil_lib_voe_acc')}\n                </title>\n            </Helmet>\n            <div className=\"pcs-formationinfos-compared\">\n                <button onClick={() => toggleComparedFormation(formationID)}>\n                    {comparedFormations.includes(formationID)\n                        ? 'Retirer du comparateur'\n                        : 'Ajouter au comparateur'}\n                </button>\n            </div>\n            <h1 className=\"pcs-formationinfos-title\">Informations générales</h1>\n            <div className=\"pcs-formationinfos-main\">\n                <h1 className=\"pcs-formationname\">\n                    {getField(s, 'fil_lib_voe_acc')}\n                </h1>\n                <div>\n                    <ul className=\"pcs-stats-ul\">\n                        <li>\n                            🗂{' '}\n                            {getField(s, 'detail_forma') !== 'NaN' ? (\n                                <em>{getField(s, 'detail_forma')} - </em>\n                            ) : (\n                                ''\n                            )}\n                            {getField(s, 'select_form')}\n                        </li>\n                        <li>\n                            🏢 {getField(s, 'g_ea_lib_vx')} -{' '}\n                            <i>{getField(s, 'contrat_etab')}</i>\n                        </li>\n                        <li>\n                            🗺 {getField(s, 'dep_lib')} ({getField(s, 'dep')}) -{' '}\n                            {getField(s, 'region_etab_aff')}\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <div className=\"pcs-formationinfos-stats\">\n                <div>\n                    <b>En 2021 :</b>\n                    <ul className=\"pcs-stats-ul\">\n                        <li>\n                            🎓 <b>{getField(s, 'capa_fin')}</b> places\n                            disponibles\n                        </li>\n                        <li>\n                            📄 <b>{getField(s, 'voe_tot')}</b> voeux enregistrés\n                        </li>\n                        {renderRankLastCalled() &&\n                            renderRankLastCalled()!.length > 0 && (\n                                <li>\n                                    <b>\n                                        🗂 Rangs des derniers appelés par groupe\n                                        :\n                                    </b>\n                                </li>\n                            )}\n                        {renderRankLastCalled()}\n                        {renderSameAcademy()}\n                        {renderSameFormation()}\n                        {renderBoursier()}\n                    </ul>\n                </div>\n            </div>\n\n            <div className=\"pcs-formationinfo-statscard-wrapper\">\n                <GirlBoyProportion\n                    count_candidat_boys={\n                        getField(s, 'voe_tot') - getField(s, 'voe_tot_f')\n                    }\n                    count_candidat_girls={getField(s, 'voe_tot_f')}\n                    count_accepted_boys={\n                        getField(s, 'acc_tot') - getField(s, 'acc_tot_f')\n                    }\n                    count_accepted_girls={getField(s, 'acc_tot_f')}\n                    title={'Proportion de candidates / candidats'}\n                />\n                <FunnelCandidates\n                    count_candidates={getField(s, 'nb_voe_pp')}\n                    count_classed={getField(s, 'nb_cla_pp')}\n                    count_proposition_received={getField(s, 'prop_tot')}\n                    count_proposition_accepted={getField(s, 'acc_tot')}\n                    title={'Sélectivité de la formation'}\n                />\n                <BaccalaureatMention\n                    count_tbf={getField(s, 'acc_tbf')}\n                    count_tb={getField(s, 'acc_tb')}\n                    count_b={getField(s, 'acc_b')}\n                    count_ab={getField(s, 'acc_ab')}\n                    count_sm={getField(s, 'acc_sansmention')}\n                    count_nr={getField(s, 'acc_mention_nonrenseignee')}\n                    title={'Mention au bac des néobachelier.e.s'}\n                />\n                <DistributionCandidates\n                    count_bg={getField(s, 'acc_bg')}\n                    count_bp={getField(s, 'acc_bp')}\n                    count_bt={getField(s, 'acc_bt')}\n                    count_oc={getField(s, 'acc_at')}\n                    title={'Provenance des futur.e.s étudiant.e.s'}\n                />\n                <FillingSpeed\n                    count_start_pp={getField(s, 'pct_acc_debutpp')}\n                    count_bac={getField(s, 'pct_acc_datebac')}\n                    count_end_pp={getField(s, 'pct_acc_finpp')}\n                    title={'Vitesse de remplissage'}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default FormationInfos\n","import { FormationList, MapWrapper, SearchBar } from 'components'\nimport { useState } from 'react'\nimport { Helmet } from 'react-helmet'\nimport './FindFormation.scss'\n\nexport interface FindFormationProps {\n    formationsData: Record<string, any>[]\n    setSelectedFormation: (formationID: string) => Promise<void>\n    loadFormations: (query?: string) => void\n    currentQuery: string\n    setView: (view: string) => void\n}\n\nconst FindFormation = (props: FindFormationProps) => {\n    const {\n        formationsData,\n        setSelectedFormation,\n        loadFormations,\n        currentQuery,\n        setView,\n    } = props\n\n    const [coordProximity, setCoordProximity] = useState<number[]>([])\n    return (\n        <div className=\"pcs-findformation-fragment\">\n            <Helmet>\n                <title>Parcoursup - Statistiques - Rechercher</title>\n            </Helmet>\n            <h1 className=\"pcs-findformation-title\">Carte des formations</h1>\n            <div className=\"pcs-findformation-main\">\n                <SearchBar\n                    loadFormations={loadFormations}\n                    currentQuery={currentQuery}\n                />\n                <MapWrapper\n                    formationsData={formationsData}\n                    dataAttribution={'Parcoursup 2021 - OpenStreetMap'}\n                    setSelectedFormation={setSelectedFormation}\n                    setCoordProximity={setCoordProximity}\n                />\n                <FormationList\n                    formationsData={formationsData}\n                    setSelectedFormation={setSelectedFormation}\n                    setView={setView}\n                    coordProximity={coordProximity}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default FindFormation\n","import { CompareGirlBoyProportion } from 'components'\nimport { Helmet } from 'react-helmet'\nimport { generateFormationName, getField, loadFormations } from 'utils'\n\nimport './CompareFormations.scss'\n\nexport interface CompareFormationsProps {\n    comparedFormations: string[]\n    toggleComparedFormation: (formationID: string) => void\n    formationsData: Record<string, Record<string, any>>\n    loadFormation: (id: string) => Promise<void>\n}\n\nconst CompareFormations = (props: CompareFormationsProps) => {\n    const {\n        comparedFormations,\n        toggleComparedFormation,\n        formationsData,\n        loadFormation,\n    } = props\n    const girlBoyProportionData = comparedFormations.map((formationID) => {\n        const s = formationsData[formationID]\n        if (!s) {\n            loadFormation(formationID)\n            return []\n        }\n        return {\n            formationID: formationID,\n            formationName: generateFormationName(s),\n            count_candidates_boys:\n                getField(s, 'voe_tot') - getField(s, 'voe_tot_f'),\n            count_candidates_girls: getField(s, 'voe_tot_f'),\n            count_accepted_boys:\n                getField(s, 'acc_tot') - getField(s, 'acc_tot_f'),\n\n            count_accepted_girls: getField(s, 'acc_tot_f'),\n        }\n    })\n\n    return (\n        <div className=\"pcs-compareFormations-fragment\">\n            <Helmet>\n                <title>Parcoursup - Statistiques - Comparer</title>\n            </Helmet>\n            {comparedFormations.map((formation) => (\n                <div>{formation}</div>\n            ))}\n            <h1 className=\"pcs-compareFormations-title\">\n                Comparaisons des formations\n            </h1>\n            <div className=\"pcs-compareFormations-main\">\n                Ici le contenu de comparaison\n            </div>\n            <div className=\"pcs-formationinfo-statscard-wrapper\">\n                <CompareGirlBoyProportion\n                    data={girlBoyProportionData}\n                    title={'Proportion de candidates / candidats'}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default CompareFormations\n","import { getField } from 'utils'\n\nexport const generateFormationName = (\n    formation: Record<string, any>\n): string => {\n    return `${getField(formation, 'fil_lib_voe_acc')} - \n    ${getField(formation, 'g_ea_lib_vx')} \n    ${\n        getField(formation, 'detail_forma') !== 'NaN'\n            ? `- ${getField(formation, 'detail_forma')}`\n            : ''\n    }`\n}\n","import { useEffect, useState } from 'react'\n\nimport './App.scss'\n\nimport { Helmet } from 'react-helmet'\n\nimport { About, Header } from 'components'\nimport { loadFormations, loadFormationData } from 'utils'\nimport { CompareFormations, FindFormation, FormationInfos } from 'views'\n\nfunction App() {\n    const [currentView, setCurrentView] = useState<string>('findFormation')\n    const [selectedFormation, setSelectedFormation] = useState<\n        string | undefined\n    >()\n    const [comparedFormations, setComparedFormations] = useState<string[]>([])\n    const [formationsData, setFormationsData] = useState<Record<string, any>[]>(\n        []\n    )\n    const [allFormationsData, setAllFormationsData] = useState<\n        Record<string, any>[]\n    >([])\n    const [formationsCache, setFormationCache] = useState<\n        Record<string, Record<string, any>>\n    >({})\n\n    const loadFormation = async (formationID: string): Promise<void> => {\n        if (!Object.keys(formationsCache).includes(formationID)) {\n            const result = await loadFormationData(formationID)\n            const newFormation: Record<string, any> = {}\n            newFormation[formationID] = result\n            setFormationCache({ ...newFormation, ...formationsCache })\n        }\n    }\n\n    const handlerSetSelectedFormation = async (formationID: string) => {\n        if (!Object.keys(formationsCache).includes(formationID))\n            await loadFormation(formationID)\n        setSelectedFormation(formationID)\n    }\n\n    const [currentQuery, setCurrentQuery] = useState<string>('')\n    const [currentQueryState, setCurrentQueryState] = useState<number>(0)\n\n    const incrementQueryState = () =>\n        setCurrentQueryState(currentQueryState + 1)\n\n    const loadDataFromQuery = async (query?: string) => {\n        incrementQueryState()\n\n        let result: Record<string, any>[] = []\n        var queryState = -1\n        if (!query && allFormationsData.length > 0) result = allFormationsData\n        else {\n            const [responseResult, responseQueryState] = await loadFormations(\n                Number(currentQueryState),\n                query\n            )\n            queryState = responseQueryState\n            result = responseResult\n            if (!query) setAllFormationsData(result)\n        }\n        setCurrentQuery(query ?? '')\n\n        if (\n            (!query && formationsData.length === 0) ||\n            queryState === currentQueryState\n        )\n            setFormationsData(result)\n    }\n\n    useEffect(() => {\n        loadDataFromQuery()\n        const urlParams = new URLSearchParams(window.location.search)\n        const q = urlParams.get('q')\n        const f = urlParams.get('f')\n        const c = urlParams.get('c')\n        if (f) {\n            handlerSetSelectedFormation(f)\n            setCurrentView('seeFormationInfos')\n        } else if (c) {\n            const ids = c.split(',')\n            loadComparedFormationsFromParam(ids)\n        } else if (q) loadDataFromQuery(q)\n    }, [])\n\n    const loadComparedFormationsFromParam = async (ids: string[]) => {\n        ids.forEach((id) => loadFormation(id))\n        setComparedFormations(ids)\n        setCurrentView('compareFormations')\n    }\n\n    const toggleComparedFormation = async (formationID: string) => {\n        if (!Object.keys(formationsCache).includes(formationID))\n            await loadFormation(formationID)\n        if (comparedFormations.includes(formationID))\n            setComparedFormations(\n                comparedFormations.filter((s) => s !== formationID)\n            )\n        else setComparedFormations(comparedFormations.concat(formationID))\n    }\n\n    const renderView = () => {\n        switch (currentView) {\n            case 'findFormation':\n                return (\n                    <FindFormation\n                        formationsData={formationsData}\n                        setSelectedFormation={handlerSetSelectedFormation}\n                        loadFormations={loadDataFromQuery}\n                        currentQuery={currentQuery}\n                        setView={setCurrentView}\n                    />\n                )\n            case 'seeFormationInfos':\n                return (\n                    <FormationInfos\n                        currentFormation={\n                            selectedFormation\n                                ? formationsCache[selectedFormation]\n                                : undefined\n                        }\n                        setView={setCurrentView}\n                        comparedFormations={comparedFormations}\n                        toggleComparedFormation={toggleComparedFormation}\n                        formationID={selectedFormation ?? ''}\n                    />\n                )\n            case 'compareFormations':\n                return (\n                    <CompareFormations\n                        comparedFormations={comparedFormations}\n                        toggleComparedFormation={toggleComparedFormation}\n                        formationsData={formationsCache}\n                        loadFormation={loadFormation}\n                    />\n                )\n            default:\n                return <p>Seems like something is broken :( Reload the page</p>\n        }\n    }\n\n    return (\n        <section>\n            <Helmet>\n                <title>Parcoursup - Statistiques</title>\n                <meta\n                    name=\"description\"\n                    content=\"Visualiseur des données publiques de Parcoursup\"\n                />\n            </Helmet>\n            <Header currentView={currentView} setView={setCurrentView} />\n            <section className=\"pcs-main-section\">{renderView()}</section>\n            <About />\n        </section>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}