{"version":3,"sources":["components/Header/Header.tsx","assets/marker.svg","components/MapWrapper/clusterLayer.ts","components/MapWrapper/clusterSource.ts","components/MapWrapper/rasterLayer.ts","utils/pickRandomItem.ts","global/parcoursupAPI.ts","utils/loadFormationData.ts","utils/getField.ts","utils/openLink.ts","global/moduleNames.ts","utils/loadFormations.ts","utils/calculateDistance.ts","utils/toRad.ts","components/MapWrapper/loadFeatures.ts","components/MapWrapper/MapWrapper.tsx","utils/clickMap.ts","components/GirlBoyProportion/GirlBoyProportion.tsx","components/FunnelCandidates/FunnelCandidates.tsx","components/StatsCard/StatsCard.tsx","components/BaccalaureatMention/BaccalaureatMention.tsx","components/FillingSpeed/FillingSpeed.tsx","components/About/About.tsx","components/SearchBar/SearchBar.tsx","components/DistributionCandidates/DistributionCandidates.tsx","components/FormationList/FormationList.tsx","components/FormationItem/FormationItem.tsx","views/FormationInfos/FormationInfos.tsx","views/FindFormation/FindFormation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","currentView","setView","disabledViews","views","label","value","icon","className","map","view","index","onClick","includes","clusterLayer","clusterSource","styleCache","VectorLayer","source","style","feature","size","get","length","schoolName","getProperties","Style","image","Icon","src","markerIcon","color","anchor","scale","text","Text","offsetY","Circle","radius","stroke","Stroke","fill","Fill","toString","Cluster","distance","minDistance","rasterLayer","TileLayer","maxZoom","XYZ","url","attributions","Math","floor","random","parcoursupAPI","loadFormationData","code_formation","a","requestURL","axios","result","data","nhits","records","fields","getField","school","fieldName","undefined","openLink","win","window","open","focus","moduleNames","loadFormations","state","query","r","console","error","calculateDistance","coordA","coordB","Infinity","dLat","toRad","dLon","lat1","lat2","sin","cos","atan2","sqrt","PI","loadFeatures","schoolsData","features","filter","entry","coord","realCoord","Array","from","reverse","feat","Feature","geometry","Point","transform","setProperties","clear","addFeatures","getView","fit","getExtent","padding","MapWrapper","useState","setMap","setSource","mapElement","useRef","useEffect","new_source","VectorSource","initialMap","Map","target","current","layers","View","projection","center","zoom","controls","addEventListener","e","evt","setSelectedSchoolID","setCoordProximity","forEachFeatureAtPixel","pixel","f","push","coordinate","properties","clickMap","loadSchool","ref","GirlBoyProportion","dataCandidats","key","count_candidat_girls","count_candidat_boys","dataAccepted","count_accepted_girls","count_accepted_boys","pourcentageCandidates","toFixed","pourcentageAccepted","description","title","ResponsiveContainer","width","height","PieChart","Pie","startAngle","endAngle","isAnimationActive","dataKey","nameKey","cx","cy","innerRadius","outerRadius","LabelList","position","Legend","iconSize","layout","verticalAlign","align","FunnelCandidates","count_classed","count_proposition_accepted","count_proposition_received","count_candidates","createLabel","val","name","FunnelChart","Funnel","offset","StatsCard","children","BaccalaureatMention","count_ab","count_b","count_nr","count_sm","count_tb","count_tbf","labelLine","fontSize","strokeWidth","FillingSpeed","count_bac","count_end_pp","count_start_pp","renderLabel","Number","isFinite","legend","textAlign","AreaChart","margin","top","left","right","bottom","XAxis","angle","type","interval","YAxis","CartesianGrid","strokeDasharray","Area","About","setOpen","m","SearchBar","currentQuery","setValue","onChange","placeholder","onKeyPress","DistributionCandidates","count_bg","count_bt","count_bp","count_oc","FormationList","coordProximity","checkEntryAsCoord","Object","keys","hasKey","isArray","sort","b","schoolData","FormationItem","FormationInfos","s","currentSchool","renderRankLastCalled","grpNumber","rank","groupLabel","group","Helmet","renderSameAcademy","renderSameSchool","renderBoursier","FindFormation","dataAttribution","App","setCurrentView","selectedSchool","setSelectedSchool","setSchoolsData","allSchoolsData","setAllSchoolsData","setDisabledViews","schoolID","log","concat","setCurrentQuery","currentQueryState","setCurrentQueryState","loadData","queryState","responseResult","responseQueryState","content","renderView","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.829c64cd.chunk.js","sourcesContent":["import './Header.scss'\n\nimport { MdSearch, MdBarChart } from 'react-icons/md'\nimport { FaSchool } from 'react-icons/fa'\n\nexport interface HeaderProps {\n    currentView: string\n    setView: (newView: string) => void\n    disabledViews: string[]\n}\n\nconst Header = (props: HeaderProps) => {\n    const { currentView, setView, disabledViews } = props\n\n    const views = [\n        {\n            label: 'Formation',\n            value: 'seeFormationInfos',\n            icon: <FaSchool className=\"pcs-header-view-button-icon-content\" />,\n        },\n        {\n            label: 'Rechercher',\n            value: 'findFormation',\n            icon: <MdSearch className=\"pcs-header-view-button-icon-content\" />,\n        },\n        {\n            label: 'Comparer',\n            value: 'compareFormations',\n            icon: (\n                <MdBarChart className=\"pcs-header-view-button-icon-content\" />\n            ),\n        },\n    ]\n\n    const renderViewButtons = () => {\n        return views.map((view, index) => (\n            <div\n                key={index}\n                onClick={() => setView(view.value)}\n                className={`pcs-header-view-button ${\n                    currentView === view.value ? 'active' : ''\n                } ${disabledViews.includes(view.value) ? 'disabled' : ''}`}\n            >\n                <div className=\"pcs-header-view-button-icon\">{view.icon}</div>\n                <div className=\"pcs-header-view-button-name\">{view.label}</div>\n            </div>\n        ))\n    }\n    return (\n        <div className=\"pcs-header\">\n            <div className=\"pcs-header-head\">\n                <h1 className=\"pcs-header-title\">\n                    📊 Statistiques sur Parcoursup\n                </h1>\n            </div>\n            <div className=\"pcs-header-menu\">{renderViewButtons()}</div>\n        </div>\n    )\n}\n\nexport default Header\n","export default __webpack_public_path__ + \"static/media/marker.7a162fbb.svg\";","import VectorLayer from 'ol/layer/Vector'\nimport Fill from 'ol/style/Fill'\nimport Circle from 'ol/style/Circle'\nimport Stroke from 'ol/style/Stroke'\nimport Text from 'ol/style/Text'\nimport Icon from 'ol/style/Icon'\nimport Style from 'ol/style/Style'\nimport markerIcon from '../../assets/marker.svg'\n\nconst clusterLayer = (clusterSource: any) => {\n    const styleCache: Record<string, Style[]> = {}\n    return new VectorLayer({\n        source: clusterSource,\n        style: (feature) => {\n            const size = feature.get('features').length\n            let style = styleCache[size]\n            if (!style || size === 1) {\n                if (size === 1) {\n                    const schoolName = feature\n                        .get('features')[0]\n                        .getProperties()['g_ea_lib_vx']\n                    style = [\n                        new Style({\n                            image: new Icon({\n                                src: markerIcon,\n                                color: '#e63946',\n                                anchor: [0.5, 1],\n                                scale: 0.5,\n                            }),\n                            text: new Text({\n                                text: schoolName,\n                                offsetY: 10,\n                            }),\n                        }),\n                    ]\n                } else {\n                    style = [\n                        new Style({\n                            image: new Circle({\n                                radius: 15,\n                                stroke: new Stroke({\n                                    color: '#e63946',\n                                }),\n                                fill: new Fill({\n                                    color: '#0e2950',\n                                }),\n                            }),\n                            text: new Text({\n                                text: size.toString(),\n                                fill: new Fill({\n                                    color: '#fff',\n                                }),\n                            }),\n                        }),\n                    ]\n                }\n                styleCache[size] = style\n            }\n            return style\n        },\n    })\n}\n\nexport default clusterLayer\n","import Geometry from 'ol/geom/Geometry'\nimport { Cluster, Vector as VectorSource } from 'ol/source'\n\nconst clusterSource = (source: VectorSource<Geometry>) => {\n    return new Cluster({\n        distance: 40,\n        minDistance: 20,\n        source: source,\n    })\n}\n\nexport default clusterSource\n","import TileLayer from 'ol/layer/Tile'\nimport XYZ from 'ol/source/XYZ'\n\nexport const rasterLayer = () => {\n    return new TileLayer({\n        maxZoom: 19,\n        source: new XYZ({\n            url: 'https://cartodb-basemaps-a.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png',\n            attributions: 'carto.com',\n        }),\n    })\n}\n\nexport default rasterLayer\n","const { floor, random } = Math\n\nexport const pickRandomItem = <T = any>(items: T[]) => {\n    return items[floor(random() * items.length)]\n}\n","export const parcoursupAPI =\n    'https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup'\n","import axios from 'axios'\nimport { parcoursupAPI } from 'global/parcoursupAPI'\n\nexport const loadFormationData = async (code_formation: string) => {\n    try {\n        const requestURL =\n            parcoursupAPI + `&q=cod_aff_form%3D\"${code_formation}\"`\n        const result = await axios.get(requestURL)\n        if (result.data && result.data.nhits === 1) {\n            return result.data.records[0].fields\n        }\n        return {}\n    } catch (e) {\n        return {}\n    }\n}\n","export const getField = (school: Record<string, any>, fieldName: string) => {\n    if (school[fieldName] !== undefined) return school[fieldName]\n    return 'NaN'\n}\n","export const openLink = (url: string) => {\n    const win = window.open(url, '_blank')\n    if (win) win.focus()\n}\n","export const moduleNames = [\n    'axios',\n    'html2canvas',\n    'ol',\n    'react',\n    'react-dom',\n    'react-helmet',\n    'react-icons',\n    'react-scripts',\n    'recharts',\n    'sass',\n    'use-react-screenshot',\n]\n","import axios from 'axios'\nimport { parcoursupAPI } from 'global'\n\nexport const loadFormations = async (\n    state: number,\n    query?: string\n): Promise<[Record<string, any>[], number]> => {\n    try {\n        const requestURL =\n            parcoursupAPI +\n            `&q=${\n                query ?? ''\n            }&rows=-1&fields=cod_aff_form,g_ea_lib_vx,g_olocalisation_des_formations,fil_lib_voe_acc,detail_forma`\n        const result = await axios.get(requestURL)\n        if (result.data)\n            return [\n                result.data.records.map((r: { fields: any }) => r.fields),\n                state,\n            ]\n        return [[], state]\n    } catch (e) {\n        console.error('error when loading Parcoursup data...')\n        return [[], state]\n    }\n}\n","import { toRad } from 'utils'\n\nexport const calculateDistance = (\n    coordA: number[] | undefined,\n    coordB: number[] | undefined\n) => {\n    if (!coordA || !coordB) return Infinity\n    const R = 6371 // km\n    const dLat = toRad(coordB[0] - coordA[0])\n    const dLon = toRad(coordB[1] - coordA[1])\n    const lat1 = toRad(coordA[0])\n    const lat2 = toRad(coordB[0])\n\n    const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.sin(dLon / 2) *\n            Math.sin(dLon / 2) *\n            Math.cos(lat1) *\n            Math.cos(lat2)\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    const d = R * c\n    return d\n}\n","export const toRad = (value: number) => {\n    return (value * Math.PI) / 180\n}\n","import { Feature, Map } from 'ol'\nimport Geometry from 'ol/geom/Geometry'\nimport Point from 'ol/geom/Point'\nimport { transform } from 'ol/proj'\nimport VectorSource from 'ol/source/Vector'\n\nexport const loadFeatures = (\n    source: VectorSource<Geometry>,\n    map: Map,\n    schoolsData: Record<string, any>[]\n) => {\n    const features = schoolsData\n        .filter((entry) => {\n            return entry['g_olocalisation_des_formations'] !== undefined\n        })\n        .map((entry) => {\n            const coord = entry['g_olocalisation_des_formations']\n            const realCoord = Array.from(coord).reverse() as number[]\n            const feat = new Feature({\n                geometry: new Point(\n                    transform(realCoord, 'EPSG:4326', 'EPSG:3857')\n                ),\n            })\n            feat.setProperties({ ...entry })\n            return feat\n        })\n\n    if (!features) return\n    source.clear()\n    source.addFeatures(features)\n    if (!map) return\n    map.getView().fit(source.getExtent(), {\n        padding: [100, 100, 100, 100],\n    })\n}\n","import { useState, useRef, useEffect, RefObject } from 'react'\n\nimport './MapWrapper.scss'\n\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport VectorSource from 'ol/source/Vector'\nimport Geometry from 'ol/geom/Geometry'\nimport { MapBrowserEvent } from 'ol'\n\nimport clusterLayer from './clusterLayer'\nimport clusterSource from './clusterSource'\nimport rasterLayer from './rasterLayer'\nimport { clickMap } from 'utils'\nimport { loadFeatures } from './loadFeatures'\n\nexport interface MapWrapperProps {\n    schoolsData: Record<string, any>[]\n    loadSchool: (schoolID: string) => void\n    dataAttribution: string\n    setCoordProximity: (coord: number[]) => void\n}\n\nconst MapWrapper = (props: MapWrapperProps) => {\n    const [map, setMap] = useState<Map>()\n    const [source, setSource] = useState<VectorSource<Geometry>>()\n\n    const mapElement = useRef() as RefObject<HTMLDivElement>\n\n    useEffect(() => {\n        const new_source = new VectorSource()\n\n        const initialMap = new Map({\n            target: mapElement.current ?? undefined,\n            layers: [rasterLayer(), clusterLayer(clusterSource(new_source))],\n            view: new View({\n                projection: 'EPSG:3857',\n                center: [0, 0],\n                zoom: 2,\n            }),\n            controls: [],\n        })\n\n        initialMap.addEventListener('singleclick', (e) =>\n            clickMap(\n                e as MapBrowserEvent<UIEvent>,\n                initialMap,\n                props.loadSchool,\n                props.setCoordProximity\n            )\n        )\n        // save map and vector layer references to state\n        setMap(initialMap)\n        setSource(new_source)\n        if (props.schoolsData.length)\n            loadFeatures(new_source, initialMap, props.schoolsData)\n    }, [])\n\n    useEffect(() => {\n        if (!source || !map || props.schoolsData.length === 0) return\n        loadFeatures(source, map, props.schoolsData)\n    }, [props.schoolsData])\n\n    return (\n        <div className=\"pcs-map-fragment\">\n            <div className=\"pcs-map-container\">\n                <div ref={mapElement} className=\"pcs-map\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default MapWrapper\n","import { Map, MapBrowserEvent } from 'ol'\nimport { transform } from 'ol/proj'\n\nexport const clickMap = (\n    evt: MapBrowserEvent<UIEvent>,\n    map: Map,\n    setSelectedSchoolID: (id: string) => void,\n    setCoordProximity: (coord: number[]) => void\n) => {\n    const features: any[] = []\n    map.forEachFeatureAtPixel(evt.pixel, (f: any) => features.push(f))\n    const coord = evt.coordinate\n    setCoordProximity(transform(coord, 'EPSG:3857', 'EPSG:4326'))\n    if (features.length !== 1) return\n    if (features[0].getProperties().features.length !== 1) return\n    const properties = features[0].getProperties().features[0].getProperties()\n    if (properties['cod_aff_form'])\n        setSelectedSchoolID(properties['cod_aff_form'])\n}\n","import { StatsCard } from 'components'\nimport { ResponsiveContainer, PieChart, Pie, Legend, LabelList } from 'recharts'\n\nexport interface GirlBoyProportionProps {\n    count_candidat_boys: number\n    count_candidat_girls: number\n    count_accepted_boys: number\n    count_accepted_girls: number\n    title: string\n}\n\nconst GirlBoyProportion = (props: GirlBoyProportionProps) => {\n    const dataCandidats = [\n        {\n            key: 'Nombre de candidates',\n            value: props.count_candidat_girls,\n            fill: '#e63946',\n        },\n        {\n            key: 'Nombre de candidats',\n            value: props.count_candidat_boys,\n            fill: '#a8dadc',\n        },\n    ]\n\n    const dataAccepted = [\n        {\n            key: \"Nombre d'acceptées\",\n            value: props.count_accepted_girls,\n            fill: '#6b6fdb',\n        },\n        {\n            key: \"Nombre d'acceptés\",\n            value: props.count_accepted_boys,\n            fill: '#76d169',\n        },\n    ]\n\n    const pourcentageCandidates = (\n        (props.count_candidat_girls /\n            (props.count_candidat_girls + props.count_candidat_boys)) *\n        100\n    ).toFixed(0)\n    const pourcentageAccepted = (\n        (props.count_accepted_girls /\n            (props.count_accepted_girls + props.count_accepted_boys)) *\n        100\n    ).toFixed(0)\n    const description = `Soit ${pourcentageCandidates}% de candidates et ${pourcentageAccepted}% ayant accepté définitivement la proposition`\n\n    return (\n        <StatsCard title={props.title} description={description}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                    <Pie\n                        data={dataCandidats}\n                        startAngle={0}\n                        endAngle={180}\n                        isAnimationActive={false}\n                        dataKey=\"value\"\n                        nameKey=\"key\"\n                        cx=\"50%\"\n                        cy=\"100%\"\n                        innerRadius={80}\n                        outerRadius={120}\n                    >\n                        <LabelList\n                            position=\"insideTop\"\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"value\"\n                        />\n                    </Pie>\n\n                    <Pie\n                        data={dataAccepted}\n                        isAnimationActive={false}\n                        startAngle={0}\n                        endAngle={180}\n                        dataKey=\"value\"\n                        nameKey=\"key\"\n                        cx=\"50%\"\n                        cy=\"100%\"\n                        innerRadius={20}\n                        outerRadius={60}\n                    >\n                        <LabelList\n                            position=\"inside\"\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"value\"\n                        />\n                    </Pie>\n                    <Legend\n                        iconSize={10}\n                        layout=\"horizontal\"\n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                    />\n                </PieChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default GirlBoyProportion\n","import { StatsCard } from 'components'\nimport { ResponsiveContainer, Funnel, FunnelChart, LabelList } from 'recharts'\n\nexport interface FunnelCandidatesProps {\n    count_candidates: number\n    count_classed: number\n    count_proposition_received: number\n    count_proposition_accepted: number\n    title: string\n}\n\nconst FunnelCandidates = (props: FunnelCandidatesProps) => {\n    const {\n        title,\n        count_classed,\n        count_proposition_accepted,\n        count_proposition_received,\n        count_candidates,\n    } = props\n    const createLabel = (val: number, description: string): string => {\n        return `${val} ${description} (${(\n            (val / count_candidates) *\n            100\n        ).toFixed(0)}%)`\n    }\n\n    const data = [\n        {\n            name: 'Nombre de candidats',\n            value: count_candidates,\n            fill: '#e63946',\n            label: createLabel(count_candidates, 'candidat.e.s'),\n        },\n        {\n            name: 'Nombre de candidats classés',\n            value: count_classed,\n            fill: '#a8dadc',\n            label: createLabel(count_classed, 'classé.e.s'),\n        },\n        {\n            name: 'Nombre de candidats ayant recu une proposition',\n            value: count_proposition_received,\n            fill: '#457b9d',\n            label: createLabel(count_proposition_received, 'admis.e.s'),\n        },\n        {\n            name: 'Nombre de candidats ayant accepté la proposition',\n            value: count_proposition_accepted,\n            fill: '#0e2950',\n            label: createLabel(count_proposition_accepted, 'ont accepté'),\n        },\n    ]\n\n    return (\n        <StatsCard title={title}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <FunnelChart>\n                    <Funnel\n                        dataKey=\"value\"\n                        data={data}\n                        isAnimationActive={false}\n                    >\n                        <LabelList\n                            position=\"insideTopLeft\"\n                            offset={10}\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"label\"\n                        />\n                    </Funnel>\n                </FunnelChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default FunnelCandidates\n","import './StatsCard.scss'\nexport interface StatsCardProps {\n    children: JSX.Element\n    title: string\n    description?: string | JSX.Element\n}\n\nconst StatsCard = (props: StatsCardProps) => {\n    const { children, title, description } = props\n\n    return (\n        <div className=\"pcs-statscard\">\n            <h1 className=\"pcs-statscard-title\">{title}</h1>\n            <div className=\"pcs-statscard-content\">\n                {children}\n                {description && (\n                    <div className=\"pcs-statscard-description\">\n                        {description}\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default StatsCard\n","import { StatsCard } from 'components'\nimport { ResponsiveContainer, Pie, PieChart, Legend, LabelList } from 'recharts'\n\nexport interface BaccalaureatMentionProps {\n    count_tbf: number\n    count_tb: number\n    count_b: number\n    count_ab: number\n    count_sm: number\n    count_nr: number\n    title: string\n}\n\nconst BaccalaureatMention = (props: BaccalaureatMentionProps) => {\n    const {\n        title,\n        count_ab,\n        count_b,\n        count_nr,\n        count_sm,\n        count_tb,\n        count_tbf,\n    } = props\n\n    const total =\n        count_ab + count_b + count_nr + count_sm + count_tb + count_tbf\n\n    const createLabel = (val: number): string => {\n        if (!val) return ''\n        return `${val}` // (${((val / total) * 100).toFixed(0)}%)`\n    }\n\n    const data = [\n        {\n            name: 'Très bien (avec félicitations)',\n            value: count_tbf,\n            fill: '#a639d6',\n            label: createLabel(count_tbf),\n        },\n        {\n            name: 'Très bien',\n            value: count_tb,\n            fill: '#e63946',\n            label: createLabel(count_tb),\n        },\n        {\n            name: 'Bien',\n            value: count_b,\n            fill: '#a8dadc',\n            label: createLabel(count_b),\n        },\n        {\n            name: 'Assez bien',\n            value: count_ab,\n            fill: '#457b9d',\n            label: createLabel(count_ab),\n        },\n        {\n            name: 'Sans mention',\n            value: count_sm,\n            fill: '#0e2950',\n            label: createLabel(count_sm),\n        },\n        {\n            name: 'Non référencé',\n            value: count_nr,\n            fill: '#2e2e2e',\n            label: createLabel(count_nr),\n        },\n    ]\n\n    return (\n        <StatsCard title={title}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                    <Pie\n                        data={data}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        isAnimationActive={false}\n                        innerRadius={40}\n                        outerRadius={80}\n                        dataKey=\"value\"\n                        labelLine={false}\n                    >\n                        <LabelList\n                            position=\"outside\"\n                            fontSize={20}\n                            offset={6}\n                            fill=\"#000\"\n                            stroke=\"#000\"\n                            strokeWidth={1}\n                            dataKey=\"label\"\n                        />\n                    </Pie>\n                    <Legend\n                        iconSize={10}\n                        layout=\"horizontal\"\n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                    />\n                </PieChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default BaccalaureatMention\n","import { StatsCard } from 'components'\nimport {\n    ResponsiveContainer,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    AreaChart,\n    Area,\n    LabelList,\n} from 'recharts'\n\nexport interface FillingSpeedProps {\n    count_start_pp: number\n    count_bac: number\n    count_end_pp: number\n    title: string\n}\n\nconst FillingSpeed = (props: FillingSpeedProps) => {\n    const { title, count_bac, count_end_pp, count_start_pp } = props\n\n    const renderLabel = (value: number): string =>\n        Number.isFinite(value) ? `${value.toFixed(0)}%` : ''\n\n    const data = [\n        {\n            name: '27 mai',\n            value: count_start_pp,\n            label: renderLabel(count_start_pp),\n        },\n        {\n            name: '17 juin',\n            value: count_bac,\n            label: renderLabel(count_bac),\n        },\n        {\n            name: '16 juillet',\n            value: count_end_pp,\n            label: renderLabel(count_end_pp),\n        },\n    ]\n\n    const legend = (\n        <ul style={{ textAlign: 'left' }}>\n            <li>27 mai : ouverture de Parcoursup</li>\n            <li>17 juin : avant le baccalauréat</li>\n            <li>16 juillet : fin de procédure Phase Principale</li>\n        </ul>\n    )\n\n    return (\n        <StatsCard title={title} description={legend}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <AreaChart\n                    data={data}\n                    margin={{ top: 20, left: 0, right: 40, bottom: 0 }}\n                >\n                    <XAxis\n                        dataKey=\"name\"\n                        angle={-30}\n                        type=\"category\"\n                        interval={0}\n                    />\n                    <YAxis />\n                    <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\n                    <Area\n                        type=\"linear\"\n                        dataKey=\"value\"\n                        stroke=\"#0e2950\"\n                        fill=\"#0e2950\"\n                        isAnimationActive={false}\n                    >\n                        <LabelList\n                            position=\"insideTop\"\n                            fill=\"#000\"\n                            stroke=\"#000\"\n                            strokeWidth={1}\n                            dataKey=\"label\"\n                        />\n                    </Area>\n                </AreaChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default FillingSpeed\n","import { moduleNames } from 'global'\nimport { useState } from 'react'\nimport { openLink } from 'utils'\nimport './About.scss'\n\nconst About = () => {\n    const [open, setOpen] = useState<boolean>(false)\n\n    const renderModules = () => {\n        return moduleNames.map((m) => (\n            <li onClick={() => openLink(`https://www.npmjs.com/package/${m}`)}>\n                {m}\n            </li>\n        ))\n    }\n    if (!open)\n        return (\n            <div className=\"pcs-about-closed\">\n                <div>Session 2021</div>\n                <div className=\"pcs-about-button\" onClick={() => setOpen(true)}>\n                    A propos\n                </div>\n            </div>\n        )\n    return (\n        <div className=\"pcs-about-open\">\n            <div className=\"pcs-about-close\">\n                <span onClick={() => setOpen(false)}>fermer</span>\n            </div>\n            <div className=\"pcs-about-made-by\">\n                Application développée par Stéphane BRANLY\n            </div>\n            <div className=\"pcs-about-tags\">\n                <div\n                    className=\"pcs-about-repo\"\n                    onClick={() =>\n                        openLink(\n                            'https://github.com/StephaneBranly/parcoursup-stats'\n                        )\n                    }\n                >\n                    Dépot de code 💻\n                </div>\n                <div\n                    className=\"pcs-about-sponsor\"\n                    onClick={() =>\n                        openLink(\n                            'https://www.paypal.com/paypalme/StephaneBranly'\n                        )\n                    }\n                >\n                    Sponsor 💜\n                </div>\n                <div\n                    className=\"pcs-about-data\"\n                    onClick={() =>\n                        openLink(\n                            'https://data.enseignementsup-recherche.gouv.fr/pages/parcoursupdata/?disjunctive.fili'\n                        )\n                    }\n                >\n                    Données publiques 🗃\n                </div>\n            </div>\n            <div className=\"pcs-about-packages\">\n                <div className=\"pcs-about-packages-label\">\n                    Modules utilisés 📦 :\n                </div>\n                <ul>{renderModules()}</ul>\n            </div>\n        </div>\n    )\n}\n\nexport default About\n","import { useState } from 'react'\nimport { MdSearch } from 'react-icons/md'\nimport './SearchBar.scss'\n\nexport interface SearchBarProps {\n    loadFormations: (query?: string) => void\n    currentQuery: string\n}\n\nconst SearchBar = (props: SearchBarProps) => {\n    const { loadFormations, currentQuery } = props\n\n    const [value, setValue] = useState<string>(currentQuery)\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            loadFormations(value)\n        }\n    }\n\n    return (\n        <div className=\"pcs-searchbar\">\n            <input\n                value={value}\n                onChange={(e) => setValue(e.target.value)}\n                className=\"pcs-searchbar-input\"\n                type=\"text\"\n                placeholder=\"Rechercher\"\n                onKeyPress={handleKeyDown}\n            />\n            <MdSearch\n                className=\"pcs-searchbar-button\"\n                onClick={() => loadFormations(value)}\n            />\n        </div>\n    )\n}\n\nexport default SearchBar\n","import { StatsCard } from 'components'\nimport { ResponsiveContainer, Pie, PieChart, Legend, LabelList } from 'recharts'\n\nexport interface DistributionCandidatesProps {\n    count_bg: number\n    count_bt: number\n    count_bp: number\n    count_oc: number\n    title: string\n}\n\nconst DistributionCandidates = (props: DistributionCandidatesProps) => {\n    const { title, count_bg, count_bt, count_bp, count_oc } = props\n\n    const createLabel = (val: number): string => {\n        if (!val) return ''\n        return `${val}` // (${((val / total) * 100).toFixed(0)}%)`\n    }\n\n    const data = [\n        {\n            name: 'Néobachelier.e.s généraux',\n            value: count_bg,\n            fill: '#e63946',\n            label: createLabel(count_bg),\n        },\n        {\n            name: 'Néobachelier.e.s technologiques',\n            value: count_bt,\n            fill: '#a8dadc',\n            label: createLabel(count_bt),\n        },\n        {\n            name: 'Néobachelier.e.s profressionnel.le.s',\n            value: count_bp,\n            fill: '#457b9d',\n            label: createLabel(count_bp),\n        },\n        {\n            name: 'Autres candidat.e.s',\n            value: count_oc,\n            fill: '#0e2950',\n            label: createLabel(count_oc),\n        },\n    ]\n\n    return (\n        <StatsCard title={title}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                    <Pie\n                        data={data}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        isAnimationActive={false}\n                        innerRadius={40}\n                        outerRadius={80}\n                        dataKey=\"value\"\n                        labelLine={false}\n                    >\n                        <LabelList\n                            position=\"outside\"\n                            fontSize={20}\n                            offset={6}\n                            fill=\"#000\"\n                            stroke=\"#000\"\n                            strokeWidth={1}\n                            dataKey=\"label\"\n                        />\n                    </Pie>\n                    <Legend\n                        iconSize={10}\n                        layout=\"horizontal\"\n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                    />\n                </PieChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default DistributionCandidates\n","import { FormationItem } from 'components'\nimport { calculateDistance } from 'utils'\nimport './FormationList.scss'\n\nexport interface FormationListProps {\n    schoolsData: Record<string, any>[]\n    loadSchool: (schoolID: string) => void\n    setView: (view: string) => void\n    coordProximity: number[]\n}\n\nconst FormationList = (props: FormationListProps) => {\n    const { schoolsData, loadSchool, setView, coordProximity } = props\n\n    const hasKey = (entry: Record<string, any>, key: string): boolean => {\n        return Object.keys(entry).includes(key)\n    }\n\n    const checkEntryAsCoord = (entry: Record<string, any>): boolean => {\n        return (\n            hasKey(entry, 'g_olocalisation_des_formations') &&\n            Array.isArray(entry['g_olocalisation_des_formations'])\n        )\n    }\n\n    const renderListItems = () => {\n        if (coordProximity.length === 2)\n            return schoolsData\n                .sort((a, b) =>\n                    checkEntryAsCoord(a) &&\n                    checkEntryAsCoord(b) &&\n                    calculateDistance(\n                        Array.from(\n                            a['g_olocalisation_des_formations']\n                        ).reverse() as number[],\n                        coordProximity\n                    ) <\n                        calculateDistance(\n                            Array.from(\n                                b['g_olocalisation_des_formations']\n                            ).reverse() as number[],\n                            coordProximity\n                        )\n                        ? -1\n                        : 1\n                )\n                .map((school, index) => (\n                    <FormationItem\n                        loadSchool={loadSchool}\n                        setView={setView}\n                        key={index}\n                        schoolData={school}\n                    />\n                ))\n        else\n            return schoolsData.map((school, index) => (\n                <FormationItem\n                    loadSchool={loadSchool}\n                    setView={setView}\n                    key={index}\n                    schoolData={school}\n                />\n            ))\n    }\n\n    return (\n        <div className=\"pcs-formationList-fragment\">\n            <ul className=\"pcs-formationList-list\">{renderListItems()}</ul>\n        </div>\n    )\n}\n\nexport default FormationList\n","import { getField } from 'utils'\nimport './FormationItem.scss'\n\nexport interface FormationItemProps {\n    schoolData: Record<string, any>\n    loadSchool: (schoolID: string) => void\n    setView: (view: string) => void\n}\n\nconst FormationItem = (props: FormationItemProps) => {\n    const { schoolData, loadSchool, setView } = props\n\n    const handleClick = () => {\n        loadSchool(schoolData['cod_aff_form'])\n        setView('seeFormationInfos')\n    }\n    return (\n        <li className=\"pcs-formationItem\" onClick={handleClick}>\n            <b>{getField(schoolData, 'fil_lib_voe_acc')}</b> -{' '}\n            {getField(schoolData, 'g_ea_lib_vx')}{' '}\n            {getField(schoolData, 'detail_forma') !== 'NaN' ? (\n                <em>- {getField(schoolData, 'detail_forma')}</em>\n            ) : (\n                ''\n            )}\n        </li>\n    )\n}\n\nexport default FormationItem\n","import {\n    BaccalaureatMention,\n    DistributionCandidates,\n    FillingSpeed,\n    FunnelCandidates,\n    GirlBoyProportion,\n} from 'components'\nimport { Helmet } from 'react-helmet'\nimport { getField } from 'utils'\nimport './FormationInfos.scss'\n\nexport interface FormationInfosProps {\n    currentSchool: Record<string, any> | undefined\n}\n\nconst FormationInfos = (props: FormationInfosProps) => {\n    const { currentSchool } = props\n    const s = currentSchool\n\n    const renderRankLastCalled = () => {\n        if (!s) return\n        return [1, 2, 3, 4, 5]\n            .map((grpNumber: number) => {\n                const rank = getField(s, `ran_grp${grpNumber}`)\n                const groupLabel = getField(s, `lib_grp${grpNumber}`)\n                return [grpNumber, Number(rank), groupLabel]\n            })\n            .filter(\n                ([index, rank, group]) =>\n                    rank !== 'NaN' &&\n                    rank !== 0 &&\n                    group !== 'NaN' &&\n                    group !== ''\n            )\n            .map(([index, rank, group]) => (\n                <li key={index}>\n                    {group} : <b>{rank}ème</b>\n                </li>\n            ))\n    }\n\n    const renderSameAcademy = () => {\n        if (!s) return\n        if (getField(s, 'pct_aca_orig_idf') === 'NaN') return\n        return (\n            <li>\n                📚 <b>{Number(getField(s, 'pct_aca_orig_idf')).toFixed(0)}%</b>{' '}\n                d'admis.e.s néobachelier.e.s issu.e.s de la même académie\n                (Paris/Crétail/Versailles réunies)\n            </li>\n        )\n    }\n    const renderSameSchool = () => {\n        if (!s) return\n        if (getField(s, 'pct_etab_orig') === 'NaN') return\n        return (\n            <li>\n                🏢 <b>{Number(getField(s, 'pct_etab_orig')).toFixed(0)}%</b>{' '}\n                d'admis.e.s néobachelier.e.s issu.e.s du même établissement\n            </li>\n        )\n    }\n    const renderBoursier = () => {\n        if (!s) return\n        if (getField(s, 'pct_bours') === 'NaN') return\n        return (\n            <li>\n                💶 <b>{Number(getField(s, 'pct_bours')).toFixed(0)}%</b>{' '}\n                d'admis.e.s néobachelier.e.s boursier.e.s\n            </li>\n        )\n    }\n\n    if (!s)\n        return (\n            <div className=\"pcs-formationinfos-fragment\">\n                <h1 className=\"pcs-formationinfos-title\">\n                    Informations générales\n                </h1>\n                <div className=\"pcs-formationinfos-main\">\n                    <h1 className=\"pcs-schoolname\">\n                        Recherchez une formation pour visualiser ses\n                        informations\n                    </h1>\n                </div>\n            </div>\n        )\n    return (\n        <div className=\"pcs-formationinfos-fragment\">\n            <Helmet>\n                <title>\n                    Parcoursup - Statistiques - {getField(s, 'g_ea_lib_vx')}\n                </title>\n            </Helmet>\n            <h1 className=\"pcs-formationinfos-title\">Informations générales</h1>\n            <div className=\"pcs-formationinfos-main\">\n                <h1 className=\"pcs-schoolname\">\n                    {getField(s, 'fil_lib_voe_acc')}\n                </h1>\n                <div>\n                    <ul className=\"pcs-stats-ul\">\n                        <li>\n                            🗂{' '}\n                            {getField(s, 'detail_forma') !== 'NaN' ? (\n                                <em>{getField(s, 'detail_forma')} - </em>\n                            ) : (\n                                ''\n                            )}\n                            {getField(s, 'select_form')}\n                        </li>\n                        <li>\n                            🏢 {getField(s, 'g_ea_lib_vx')} -{' '}\n                            <i>{getField(s, 'contrat_etab')}</i>\n                        </li>\n                        <li>\n                            🗺 {getField(s, 'dep_lib')} ({getField(s, 'dep')}) -{' '}\n                            {getField(s, 'region_etab_aff')}\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <div className=\"pcs-formationinfos-stats\">\n                <div>\n                    <b>En 2021 :</b>\n                    <ul className=\"pcs-stats-ul\">\n                        <li>\n                            🎓 <b>{getField(s, 'capa_fin')}</b> places\n                            disponibles\n                        </li>\n                        <li>\n                            📄 <b>{getField(s, 'voe_tot')}</b> voeux enregistrés\n                        </li>\n                        {renderRankLastCalled() &&\n                            renderRankLastCalled()!.length > 0 && (\n                                <li>\n                                    <b>\n                                        🗂 Rangs des derniers appelés par groupe\n                                        :\n                                    </b>\n                                </li>\n                            )}\n                        {renderRankLastCalled()}\n                        {renderSameAcademy()}\n                        {renderSameSchool()}\n                        {renderBoursier()}\n                    </ul>\n                </div>\n            </div>\n\n            <div className=\"pcs-formationinfo-statscard-wrapper\">\n                <GirlBoyProportion\n                    count_candidat_boys={\n                        getField(s, 'voe_tot') - getField(s, 'voe_tot_f')\n                    }\n                    count_candidat_girls={getField(s, 'voe_tot_f')}\n                    count_accepted_boys={\n                        getField(s, 'acc_tot') - getField(s, 'acc_tot_f')\n                    }\n                    count_accepted_girls={getField(s, 'acc_tot_f')}\n                    title={'Proportion de candidates / candidats'}\n                />\n                <FunnelCandidates\n                    count_candidates={getField(s, 'nb_voe_pp')}\n                    count_classed={getField(s, 'nb_cla_pp')}\n                    count_proposition_received={getField(s, 'prop_tot')}\n                    count_proposition_accepted={getField(s, 'acc_tot')}\n                    title={'Sélectivité de la formation'}\n                />\n                <BaccalaureatMention\n                    count_tbf={getField(s, 'acc_tbf')}\n                    count_tb={getField(s, 'acc_tb')}\n                    count_b={getField(s, 'acc_b')}\n                    count_ab={getField(s, 'acc_ab')}\n                    count_sm={getField(s, 'acc_sansmention')}\n                    count_nr={getField(s, 'acc_mention_nonrenseignee')}\n                    title={'Mention au bac des néobachelier.e.s'}\n                />\n                <DistributionCandidates\n                    count_bg={getField(s, 'acc_bg')}\n                    count_bp={getField(s, 'acc_bp')}\n                    count_bt={getField(s, 'acc_bt')}\n                    count_oc={getField(s, 'acc_at')}\n                    title={'Provenance des futur.e.s étudiant.e.s'}\n                />\n                <FillingSpeed\n                    count_start_pp={getField(s, 'pct_acc_debutpp')}\n                    count_bac={getField(s, 'pct_acc_datebac')}\n                    count_end_pp={getField(s, 'pct_acc_finpp')}\n                    title={'Vitesse de remplissage'}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default FormationInfos\n","import { FormationList, MapWrapper, SearchBar } from 'components'\nimport { useState } from 'react'\nimport { Helmet } from 'react-helmet'\nimport './FindFormation.scss'\n\nexport interface FindFormationProps {\n    schoolsData: Record<string, any>[]\n    loadSchool: (schoolID: string) => void\n    loadFormations: (query?: string) => void\n    currentQuery: string\n    setView: (view: string) => void\n}\n\nconst FindFormation = (props: FindFormationProps) => {\n    const { schoolsData, loadSchool, loadFormations, currentQuery, setView } =\n        props\n\n    const [coordProximity, setCoordProximity] = useState<number[]>([])\n    return (\n        <div className=\"pcs-findformation-fragment\">\n            <Helmet>\n                <title>Parcoursup - Statistiques - Rechercher</title>\n            </Helmet>\n            <h1 className=\"pcs-findformation-title\">Carte des formations</h1>\n            <div className=\"pcs-findformation-main\">\n                <SearchBar\n                    loadFormations={loadFormations}\n                    currentQuery={currentQuery}\n                />\n                <MapWrapper\n                    schoolsData={schoolsData}\n                    dataAttribution={'Parcoursup 2021 - OpenStreetMap'}\n                    loadSchool={loadSchool}\n                    setCoordProximity={setCoordProximity}\n                />\n                <FormationList\n                    schoolsData={schoolsData}\n                    loadSchool={loadSchool}\n                    setView={setView}\n                    coordProximity={coordProximity}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default FindFormation\n","import { useEffect, useState } from 'react'\n\nimport './App.scss'\n\nimport { Helmet } from 'react-helmet'\n\nimport { About, Header } from 'components'\nimport { loadFormations, loadFormationData } from 'utils'\nimport { FindFormation, FormationInfos } from 'views'\n\nfunction App() {\n    const [currentView, setCurrentView] = useState<string>('findFormation')\n    const [selectedSchool, setSelectedSchool] = useState<\n        Record<string, any> | undefined\n    >()\n    const [schoolsData, setSchoolsData] = useState<Record<string, any>[]>([])\n    const [allSchoolsData, setAllSchoolsData] = useState<Record<string, any>[]>(\n        []\n    )\n    const [disabledViews, setDisabledViews] = useState<string[]>([\n        'seeFormationInfos',\n    ])\n\n    const loadSchool = async (schoolID: string) => {\n        const result = await loadFormationData(schoolID)\n        console.log(result)\n        setSelectedSchool(result)\n        if (result)\n            setDisabledViews(\n                disabledViews.filter((a) => a !== 'seeFormationInfos')\n            )\n        else setDisabledViews(disabledViews.concat('seeFormationInfos'))\n    }\n\n    const [currentQuery, setCurrentQuery] = useState<string>('')\n    const [currentQueryState, setCurrentQueryState] = useState<number>(0)\n\n    const incrementQueryState = () =>\n        setCurrentQueryState(currentQueryState + 1)\n\n    const loadData = async (query?: string) => {\n        incrementQueryState()\n\n        let result: Record<string, any>[] = []\n        var queryState = -1\n        if (!query && allSchoolsData.length > 0) result = allSchoolsData\n        else {\n            const [responseResult, responseQueryState] = await loadFormations(\n                Number(currentQueryState),\n                query\n            )\n            queryState = responseQueryState\n            result = responseResult\n            if (!query) setAllSchoolsData(result)\n        }\n        setCurrentQuery(query ?? '')\n\n        if (\n            (!query && schoolsData.length === 0) ||\n            queryState === currentQueryState\n        )\n            setSchoolsData(result)\n    }\n\n    useEffect(() => {\n        loadData()\n    }, [])\n\n    const renderView = () => {\n        switch (currentView) {\n            case 'findFormation':\n                return (\n                    <FindFormation\n                        schoolsData={schoolsData}\n                        loadSchool={loadSchool}\n                        loadFormations={loadData}\n                        currentQuery={currentQuery}\n                        setView={setCurrentView}\n                    />\n                )\n            case 'seeFormationInfos':\n                return <FormationInfos currentSchool={selectedSchool} />\n            default:\n                return <p>Seems like something is broken :( Reload the page</p>\n        }\n    }\n\n    return (\n        <section>\n            <Helmet>\n                <title>Parcoursup - Statistiques</title>\n                <meta\n                    name=\"description\"\n                    content=\"Visualiseur des données publiques de Parcoursup\"\n                />\n            </Helmet>\n            <Header\n                currentView={currentView}\n                setView={setCurrentView}\n                disabledViews={disabledViews}\n            />\n            <section className=\"pcs-main-section\">{renderView()}</section>\n            <About />\n        </section>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}