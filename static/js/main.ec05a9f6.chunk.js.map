{"version":3,"sources":["components/Header/Header.tsx","assets/marker.svg","components/MapWrapper/clusterLayer.ts","components/MapWrapper/clusterSource.ts","components/MapWrapper/osmLayer.ts","utils/pickRandomItem.ts","global/parcoursupAPI.ts","utils/loadFormationData.ts","utils/getField.ts","components/MapWrapper/MapWrapper.tsx","utils/clickMap.ts","components/GirlBoyProportion/GirlBoyProportion.tsx","components/FunnelCandidates/FunnelCandidates.tsx","components/StatsCard/StatsCard.tsx","components/BaccalaureatMention/BaccalaureatMention.tsx","components/FillingSpeed/FillingSpeed.tsx","views/FormationInfos/FormationInfos.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","currentView","setView","views","label","value","icon","className","map","view","onClick","clusterLayer","clusterSource","styleCache","VectorLayer","source","style","feature","size","get","length","schoolName","getProperties","Style","image","Icon","src","markerIcon","color","anchor","scale","text","Text","offsetY","Circle","radius","stroke","Stroke","fill","Fill","toString","Cluster","distance","minDistance","osmLayer","TileLayer","maxZoom","XYZ","url","Math","floor","random","parcoursupAPI","loadFormationData","code_formation","a","requestURL","axios","result","data","nhits","records","fields","getField","school","fieldName","undefined","MapWrapper","useState","setMap","setSource","mapElement","useRef","useEffect","new_source","VectorSource","initialMap","Map","target","current","layers","View","projection","center","zoom","controls","addEventListener","e","evt","setSelectedSchoolID","features","forEachFeatureAtPixel","pixel","f","push","console","log","properties","clickMap","loadSchool","schoolsData","filter","entry","coord","feat","Feature","geometry","Point","transform","reverse","setProperties","clear","addFeatures","getView","fit","getExtent","padding","ref","GirlBoyProportion","dataCandidats","key","count_candidat_girls","count_candidat_boys","dataAccepted","count_accepted_girls","count_accepted_boys","pourcentageCandidates","toFixed","pourcentageAccepted","description","title","ResponsiveContainer","width","height","PieChart","Pie","startAngle","endAngle","isAnimationActive","dataKey","nameKey","cx","cy","innerRadius","outerRadius","LabelList","position","Legend","iconSize","layout","verticalAlign","align","FunnelCandidates","count_classed","count_proposition_accepted","count_proposition_received","count_candidates","createLabel","val","name","FunnelChart","Funnel","offset","StatsCard","children","BaccalaureatMention","count_ab","count_b","count_nr","count_sm","count_tb","count_tbf","labelLine","fontSize","strokeWidth","FillingSpeed","count_bac","count_end_pp","count_start_pp","renderLabel","legend","textAlign","AreaChart","margin","top","left","right","bottom","XAxis","angle","type","interval","YAxis","CartesianGrid","strokeDasharray","Area","FormationInfos","s","currentSchool","grpNumber","rank","groupLabel","Number","group","renderRankLastCalled","renderSameAcademy","renderSameSchool","App","setCurrentView","selectedSchool","setSelectedSchool","setSchoolsData","schoolID","loadData","finished","dataLength","concat","r","error","Helmet","content","dataAttribution","renderView","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec05a9f6.chunk.js","sourcesContent":["import './Header.scss'\n\nimport { MdSearch, MdBarChart } from 'react-icons/md'\nimport { FaSchool } from 'react-icons/fa'\n\nexport interface HeaderProps {\n    currentView: string\n    setView: (newView: string) => void\n}\n\nconst Header = (props: HeaderProps) => {\n    const { currentView, setView } = props\n\n    const views = [\n        {\n            label: 'Formation',\n            value: 'seeFormationInfos',\n            icon: <FaSchool className=\"pcs-header-view-button-icon-content\" />,\n        },\n        {\n            label: 'Rechercher',\n            value: 'findFormation',\n            icon: <MdSearch className=\"pcs-header-view-button-icon-content\" />,\n        },\n        {\n            label: 'Comparer',\n            value: 'compareFormations',\n            icon: (\n                <MdBarChart className=\"pcs-header-view-button-icon-content\" />\n            ),\n        },\n    ]\n\n    const renderViewButtons = () => {\n        return views.map((view) => (\n            <div\n                onClick={() => setView(view.value)}\n                className={`pcs-header-view-button ${\n                    currentView === view.value ? 'active' : ''\n                }`}\n            >\n                <div className=\"pcs-header-view-button-icon\">{view.icon}</div>\n                <div className=\"pcs-header-view-button-name\">{view.label}</div>\n            </div>\n        ))\n    }\n    return (\n        <div className=\"pcs-header\">\n            <div className=\"pcs-header-head\">\n                <h1 className=\"pcs-header-title\">\n                    📊 Statistiques sur la plateforme\n                </h1>\n            </div>\n            <div className=\"pcs-header-menu\">{renderViewButtons()}</div>\n        </div>\n    )\n}\n\nexport default Header\n","export default __webpack_public_path__ + \"static/media/marker.7a162fbb.svg\";","import VectorLayer from 'ol/layer/Vector'\nimport Fill from 'ol/style/Fill'\nimport Circle from 'ol/style/Circle'\nimport Stroke from 'ol/style/Stroke'\nimport Text from 'ol/style/Text'\nimport Icon from 'ol/style/Icon'\nimport Style from 'ol/style/Style'\nimport markerIcon from '../../assets/marker.svg'\n\nconst clusterLayer = (clusterSource: any) => {\n    const styleCache: Record<string, Style[]> = {}\n    return new VectorLayer({\n        source: clusterSource,\n        style: (feature) => {\n            const size = feature.get('features').length\n            let style = styleCache[size]\n            if (!style || size === 1) {\n                if (size === 1) {\n                    const schoolName = feature\n                        .get('features')[0]\n                        .getProperties()['g_ea_lib_vx']\n                    style = [\n                        new Style({\n                            image: new Icon({\n                                src: markerIcon,\n                                color: '#e63946',\n                                anchor: [0.5, 1],\n                                scale: 0.5,\n                            }),\n                            text: new Text({\n                                text: schoolName,\n                                offsetY: 10,\n                            }),\n                        }),\n                    ]\n                } else {\n                    style = [\n                        new Style({\n                            image: new Circle({\n                                radius: 15,\n                                stroke: new Stroke({\n                                    color: '#e63946',\n                                }),\n                                fill: new Fill({\n                                    color: '#1d3557',\n                                }),\n                            }),\n                            text: new Text({\n                                text: size.toString(),\n                                fill: new Fill({\n                                    color: '#fff',\n                                }),\n                            }),\n                        }),\n                    ]\n                }\n                styleCache[size] = style\n            }\n            return style\n        },\n    })\n}\n\nexport default clusterLayer\n","import Geometry from 'ol/geom/Geometry'\nimport { Cluster, Vector as VectorSource } from 'ol/source'\n\nconst clusterSource = (source: VectorSource<Geometry>) => {\n    return new Cluster({\n        distance: 40,\n        minDistance: 20,\n        source: source,\n    })\n}\n\nexport default clusterSource\n","import TileLayer from 'ol/layer/Tile'\nimport XYZ from 'ol/source/XYZ'\n\nexport const osmLayer = () => {\n    return new TileLayer({\n        maxZoom: 19,\n        source: new XYZ({\n            url: 'https://cartodb-basemaps-a.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png',\n        }),\n    })\n}\n\nexport default osmLayer\n","const { floor, random } = Math\n\nexport const pickRandomItem = <T = any>(items: T[]) => {\n    return items[floor(random() * items.length)]\n}\n","export const parcoursupAPI =\n    'https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup'\n","import axios from 'axios'\nimport { parcoursupAPI } from 'global/parcoursupAPI'\n\nexport const loadFormationData = async (code_formation: string) => {\n    try {\n        const requestURL =\n            parcoursupAPI + `&q=cod_aff_form%3D\"${code_formation}\"`\n        const result = await axios.get(requestURL)\n        if (result.data && result.data.nhits === 1) {\n            return result.data.records[0].fields\n        }\n        return {}\n    } catch (e) {\n        return {}\n    }\n}\n","export const getField = (school: Record<string, any>, fieldName: string) => {\n    if (school[fieldName] !== undefined) return school[fieldName]\n    return 'NaN'\n}\n","import { useState, useRef, useEffect, RefObject } from 'react'\n\nimport './MapWrapper.scss'\n\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport VectorSource from 'ol/source/Vector'\nimport Geometry from 'ol/geom/Geometry'\nimport { Feature, MapBrowserEvent } from 'ol'\nimport Point from 'ol/geom/Point'\nimport { transform } from 'ol/proj'\n\nimport clusterLayer from './clusterLayer'\nimport clusterSource from './clusterSource'\nimport osmLayer from './osmLayer'\nimport { clickMap } from 'utils'\n\nexport interface MapWrapperProps {\n    schoolsData: Record<string, any>[]\n    loadSchool: (schoolID: string) => void\n    dataAttribution: string\n}\n\nconst MapWrapper = (props: MapWrapperProps) => {\n    const [map, setMap] = useState<Map>()\n    const [source, setSource] = useState<VectorSource<Geometry>>()\n\n    const mapElement = useRef() as RefObject<HTMLDivElement>\n\n    useEffect(() => {\n        const new_source = new VectorSource()\n\n        const initialMap = new Map({\n            target: mapElement.current ?? undefined,\n            layers: [osmLayer(), clusterLayer(clusterSource(new_source))],\n            view: new View({\n                projection: 'EPSG:3857',\n                center: [0, 0],\n                zoom: 2,\n            }),\n            controls: [],\n        })\n\n        initialMap.addEventListener('singleclick', (e) =>\n            clickMap(\n                e as MapBrowserEvent<UIEvent>,\n                initialMap,\n                props.loadSchool\n            )\n        )\n        // save map and vector layer references to state\n        setMap(initialMap)\n        setSource(new_source)\n    }, [])\n\n    useEffect(() => {\n        if (!source || props.schoolsData.length === 0) return\n\n        const features = props.schoolsData\n            .filter((entry) => {\n                return entry['g_olocalisation_des_formations'] !== undefined\n            })\n            .map((entry) => {\n                const coord = entry['g_olocalisation_des_formations']\n                const feat = new Feature({\n                    geometry: new Point(\n                        transform(coord.reverse(), 'EPSG:4326', 'EPSG:3857')\n                    ),\n                })\n                feat.setProperties({ ...entry })\n                return feat\n            })\n\n        if (!features) return\n        source.clear()\n        source.addFeatures(features)\n        if (!map) return\n        map.getView().fit(source.getExtent(), {\n            padding: [100, 100, 100, 100],\n        })\n    }, [props.schoolsData])\n\n    return (\n        <div className=\"pcs-map-fragment\">\n            <h1 className=\"pcs-map-title\">Carte des formations</h1>\n            <div className=\"pcs-map-container\">\n                <div ref={mapElement} className=\"pcs-map\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default MapWrapper\n","import { Map, MapBrowserEvent } from 'ol'\n\nexport const clickMap = (\n    evt: MapBrowserEvent<UIEvent>,\n    map: Map,\n    setSelectedSchoolID: (id: string) => void\n) => {\n    const features: any[] = []\n    map.forEachFeatureAtPixel(evt.pixel, (f: any) => features.push(f))\n    console.log(features)\n    if (features.length !== 1) return\n    if (features[0].getProperties().features.length !== 1) return\n    const properties = features[0].getProperties().features[0].getProperties()\n    console.log(properties)\n    if (properties['cod_aff_form'])\n        setSelectedSchoolID(properties['cod_aff_form'])\n}\n","import { StatsCard } from 'components'\nimport { ResponsiveContainer, PieChart, Pie, Legend, LabelList } from 'recharts'\n\nexport interface GirlBoyProportionProps {\n    count_candidat_boys: number\n    count_candidat_girls: number\n    count_accepted_boys: number\n    count_accepted_girls: number\n    title: string\n}\n\nconst GirlBoyProportion = (props: GirlBoyProportionProps) => {\n    const dataCandidats = [\n        {\n            key: 'Nombre de candidates',\n            value: props.count_candidat_girls,\n            fill: '#e63946',\n        },\n        {\n            key: 'Nombre de candidats',\n            value: props.count_candidat_boys,\n            fill: '#a8dadc',\n        },\n    ]\n\n    const dataAccepted = [\n        {\n            key: \"Nombre d'acceptées\",\n            value: props.count_accepted_girls,\n            fill: '#6b6fdb',\n        },\n        {\n            key: \"Nombre d'acceptés\",\n            value: props.count_accepted_boys,\n            fill: '#76d169',\n        },\n    ]\n\n    const pourcentageCandidates = (\n        (props.count_candidat_girls /\n            (props.count_candidat_girls + props.count_candidat_boys)) *\n        100\n    ).toFixed(0)\n    const pourcentageAccepted = (\n        (props.count_accepted_girls /\n            (props.count_accepted_girls + props.count_accepted_boys)) *\n        100\n    ).toFixed(0)\n    const description = `Soit ${pourcentageCandidates}% de candidates et ${pourcentageAccepted}% ayant accepté définitivement la proposition`\n\n    return (\n        <StatsCard title={props.title} description={description}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                    <Pie\n                        data={dataCandidats}\n                        startAngle={0}\n                        endAngle={180}\n                        isAnimationActive={false}\n                        dataKey=\"value\"\n                        nameKey=\"key\"\n                        cx=\"50%\"\n                        cy=\"100%\"\n                        innerRadius={80}\n                        outerRadius={120}\n                    >\n                        <LabelList\n                            position=\"insideTop\"\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"value\"\n                        />\n                    </Pie>\n\n                    <Pie\n                        data={dataAccepted}\n                        isAnimationActive={false}\n                        startAngle={0}\n                        endAngle={180}\n                        dataKey=\"value\"\n                        nameKey=\"key\"\n                        cx=\"50%\"\n                        cy=\"100%\"\n                        innerRadius={20}\n                        outerRadius={60}\n                    >\n                        <LabelList\n                            position=\"inside\"\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"value\"\n                        />\n                    </Pie>\n                    <Legend\n                        iconSize={10}\n                        layout=\"horizontal\"\n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                    />\n                </PieChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default GirlBoyProportion\n","import { StatsCard } from 'components'\nimport { ResponsiveContainer, Funnel, FunnelChart, LabelList } from 'recharts'\n\nexport interface FunnelCandidatesProps {\n    count_candidates: number\n    count_classed: number\n    count_proposition_received: number\n    count_proposition_accepted: number\n    title: string\n}\n\nconst FunnelCandidates = (props: FunnelCandidatesProps) => {\n    const {\n        title,\n        count_classed,\n        count_proposition_accepted,\n        count_proposition_received,\n        count_candidates,\n    } = props\n    const createLabel = (val: number, description: string): string => {\n        return `${val} ${description} (${(\n            (val / count_candidates) *\n            100\n        ).toFixed(0)}%)`\n    }\n\n    const data = [\n        {\n            name: 'Nombre de candidats',\n            value: count_candidates,\n            fill: '#e63946',\n            label: createLabel(count_candidates, 'candidat.e.s'),\n        },\n        {\n            name: 'Nombre de candidats classés',\n            value: count_classed,\n            fill: '#a8dadc',\n            label: createLabel(count_classed, 'classé.e.s'),\n        },\n        {\n            name: 'Nombre de candidats ayant recu une proposition',\n            value: count_proposition_received,\n            fill: '#457b9d',\n            label: createLabel(count_proposition_received, 'admis.e.s'),\n        },\n        {\n            name: 'Nombre de candidats ayant accepté la proposition',\n            value: count_proposition_accepted,\n            fill: '#1d3557',\n            label: createLabel(count_proposition_accepted, 'ont accepté'),\n        },\n    ]\n\n    return (\n        <StatsCard title={title}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <FunnelChart>\n                    <Funnel\n                        dataKey=\"value\"\n                        data={data}\n                        isAnimationActive={false}\n                    >\n                        <LabelList\n                            position=\"insideTopLeft\"\n                            offset={10}\n                            fill=\"#000\"\n                            stroke=\"none\"\n                            dataKey=\"label\"\n                        />\n                    </Funnel>\n                </FunnelChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default FunnelCandidates\n","import './StatsCard.scss'\nexport interface StatsCardProps {\n    children: JSX.Element\n    title: string\n    description?: string | JSX.Element\n}\n\nconst StatsCard = (props: StatsCardProps) => {\n    const { children, title, description } = props\n\n    return (\n        <div className=\"pcs-statscard\">\n            <h1 className=\"pcs-statscard-title\">{title}</h1>\n            <div className=\"pcs-statscard-content\">\n                {children}\n                {description && (\n                    <p className=\"pcs-statscard-description\">{description}</p>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default StatsCard\n","import { StatsCard } from 'components'\nimport { ResponsiveContainer, Pie, PieChart, Legend, LabelList } from 'recharts'\n\nexport interface BaccalaureatMentionProps {\n    count_tbf: number\n    count_tb: number\n    count_b: number\n    count_ab: number\n    count_sm: number\n    count_nr: number\n    title: string\n}\n\nconst BaccalaureatMention = (props: BaccalaureatMentionProps) => {\n    const {\n        title,\n        count_ab,\n        count_b,\n        count_nr,\n        count_sm,\n        count_tb,\n        count_tbf,\n    } = props\n\n    const total =\n        count_ab + count_b + count_nr + count_sm + count_tb + count_tbf\n\n    const createLabel = (val: number): string => {\n        if (!val) return ''\n        return `${val}` // (${((val / total) * 100).toFixed(0)}%)`\n    }\n\n    const data = [\n        {\n            name: 'Très bien (avec félicitations)',\n            value: count_tbf,\n            fill: '#a639d6',\n            label: createLabel(count_tbf),\n        },\n        {\n            name: 'Très bien',\n            value: count_tb,\n            fill: '#e63946',\n            label: createLabel(count_tb),\n        },\n        {\n            name: 'Bien',\n            value: count_b,\n            fill: '#a8dadc',\n            label: createLabel(count_b),\n        },\n        {\n            name: 'Assez bien',\n            value: count_ab,\n            fill: '#457b9d',\n            label: createLabel(count_ab),\n        },\n        {\n            name: 'Sans mention',\n            value: count_sm,\n            fill: '#1d3557',\n            label: createLabel(count_sm),\n        },\n        {\n            name: 'Non référencé',\n            value: count_nr,\n            fill: '#2e2e2e',\n            label: createLabel(count_nr),\n        },\n    ]\n\n    return (\n        <StatsCard title={title}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                    <Pie\n                        data={data}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        isAnimationActive={false}\n                        innerRadius={40}\n                        outerRadius={80}\n                        dataKey=\"value\"\n                        labelLine={false}\n                    >\n                        <LabelList\n                            position=\"outside\"\n                            fontSize={20}\n                            offset={6}\n                            fill=\"#000\"\n                            stroke=\"#000\"\n                            strokeWidth={1}\n                            dataKey=\"label\"\n                        />\n                    </Pie>\n                    <Legend\n                        iconSize={10}\n                        layout=\"horizontal\"\n                        verticalAlign=\"bottom\"\n                        align=\"center\"\n                    />\n                </PieChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default BaccalaureatMention\n","import { StatsCard } from 'components'\nimport {\n    ResponsiveContainer,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    AreaChart,\n    Area,\n    LabelList,\n} from 'recharts'\n\nexport interface FillingSpeedProps {\n    count_start_pp: number\n    count_bac: number\n    count_end_pp: number\n    title: string\n}\n\nconst FillingSpeed = (props: FillingSpeedProps) => {\n    const { title, count_bac, count_end_pp, count_start_pp } = props\n\n    const renderLabel = (value: number): string => `${value.toFixed(0)}%`\n    const data = [\n        {\n            name: '27 mai',\n            value: count_start_pp,\n            label: renderLabel(count_start_pp),\n        },\n        {\n            name: '17 juin',\n            value: count_bac,\n            label: renderLabel(count_bac),\n        },\n        {\n            name: '16 juillet',\n            value: count_end_pp,\n            label: renderLabel(count_end_pp),\n        },\n    ]\n\n    const legend = (\n        <ul style={{ textAlign: 'left' }}>\n            <li>27 mai : ouverture de Parcoursup</li>\n            <li>17 juin : avant le baccalauréat</li>\n            <li>16 juillet : Fin de procédure Phase Principale</li>\n        </ul>\n    )\n\n    return (\n        <StatsCard title={title} description={legend}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <AreaChart\n                    data={data}\n                    margin={{ top: 20, left: 0, right: 40, bottom: 0 }}\n                >\n                    <XAxis\n                        dataKey=\"name\"\n                        angle={-30}\n                        type=\"category\"\n                        interval={0}\n                    />\n                    <YAxis />\n                    <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\n                    <Area\n                        type=\"linear\"\n                        dataKey=\"value\"\n                        stroke=\"#1d3557\"\n                        fill=\"#1d3557\"\n                        isAnimationActive={false}\n                    >\n                        <LabelList\n                            position=\"insideTop\"\n                            fill=\"#000\"\n                            stroke=\"#000\"\n                            strokeWidth={1}\n                            dataKey=\"label\"\n                        />\n                    </Area>\n                </AreaChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default FillingSpeed\n","import {\n    BaccalaureatMention,\n    FillingSpeed,\n    FunnelCandidates,\n    GirlBoyProportion,\n} from 'components'\nimport { getField } from 'utils'\nimport './FormationInfos.scss'\n\nexport interface FormationInfosProps {\n    currentSchool: Record<string, any> | undefined\n}\n\nconst FormationInfos = (props: FormationInfosProps) => {\n    const { currentSchool } = props\n    const s = currentSchool\n\n    const renderRankLastCalled = () => {\n        if (!s) return\n        return [1, 2, 3, 4, 5]\n            .map((grpNumber: number) => {\n                const rank = getField(s, `ran_grp${grpNumber}`)\n                const groupLabel = getField(s, `lib_grp${grpNumber}`)\n                return [grpNumber, Number(rank), groupLabel]\n            })\n            .filter(\n                ([index, rank, group]) =>\n                    rank !== 'NaN' &&\n                    rank !== 0 &&\n                    group !== 'NaN' &&\n                    group !== ''\n            )\n            .map(([index, rank, group]) => (\n                <li>\n                    {group} : <b>{rank}ème</b>\n                </li>\n            ))\n    }\n\n    const renderSameAcademy = () => {\n        if (!s) return\n        if (getField(s, 'pct_aca_orig_idf') === 'NaN') return\n        return (\n            <li>\n                📚 <b>{Number(getField(s, 'pct_aca_orig_idf')).toFixed(0)}%</b>{' '}\n                d'admis.e.s néobachelier.e.s issu.e.s de la même académie\n                (Paris/Crétail/Versailles réunies)\n            </li>\n        )\n    }\n    const renderSameSchool = () => {\n        if (!s) return\n        if (getField(s, 'pct_etab_orig') === 'NaN') return\n        return (\n            <li>\n                🏢 <b>{Number(getField(s, 'pct_etab_orig')).toFixed(0)}%</b>{' '}\n                d'admis.e.s néobachelier.e.s issu.e.s du même établissement\n            </li>\n        )\n    }\n\n    if (!s)\n        return (\n            <div className=\"pcs-formationinfos-fragment\">\n                <h1 className=\"pcs-formationinfos-title\">\n                    Informations générales\n                </h1>\n                <div className=\"pcs-formationinfos-main\">\n                    <h1 className=\"pcs-schoolname\">\n                        Selectionnez une formation\n                    </h1>\n                </div>\n            </div>\n        )\n    return (\n        <div className=\"pcs-formationinfos-fragment\">\n            <h1 className=\"pcs-formationinfos-title\">Informations générales</h1>\n            <div className=\"pcs-formationinfos-main\">\n                <h1 className=\"pcs-schoolname\">\n                    {getField(s, 'fil_lib_voe_acc')}\n                </h1>\n                <p>\n                    <ul className=\"pcs-stats-ul\">\n                        <li>🗂 {getField(s, 'select_form')}</li>\n                        <li>\n                            🏢 {getField(s, 'g_ea_lib_vx')} -{' '}\n                            <i>{getField(s, 'contrat_etab')}</i>\n                        </li>\n                        <li>\n                            🗺 {getField(s, 'dep_lib')} ({getField(s, 'dep')}) -{' '}\n                            {getField(s, 'region_etab_aff')}\n                        </li>\n                    </ul>\n                </p>\n            </div>\n            <div className=\"pcs-formationinfos-stats\">\n                <p>\n                    <b>En 2021 :</b>\n                    <ul className=\"pcs-stats-ul\">\n                        <li>\n                            🎓 <b>{getField(s, 'capa_fin')}</b> places\n                            disponibles\n                        </li>\n                        <li>\n                            📄 <b>{getField(s, 'voe_tot')}</b> voeux enregistrés\n                        </li>\n                        <li>\n                            <b>🗂 Rangs des derniers appelés par groupe :</b>\n                        </li>\n                        {renderRankLastCalled()}\n                        {renderSameAcademy()}\n\n                        {renderSameSchool()}\n                    </ul>\n                </p>\n            </div>\n\n            <div className=\"pcs-formationinfo-statscard-wrapper\">\n                <GirlBoyProportion\n                    count_candidat_boys={\n                        getField(s, 'voe_tot') - getField(s, 'voe_tot_f')\n                    }\n                    count_candidat_girls={getField(s, 'voe_tot_f')}\n                    count_accepted_boys={\n                        getField(s, 'acc_tot') - getField(s, 'acc_tot_f')\n                    }\n                    count_accepted_girls={getField(s, 'acc_tot_f')}\n                    title={'Proportion de candidates / candidats'}\n                />\n                <FunnelCandidates\n                    count_candidates={getField(s, 'nb_voe_pp')}\n                    count_classed={getField(s, 'nb_cla_pp')}\n                    count_proposition_received={getField(s, 'prop_tot')}\n                    count_proposition_accepted={getField(s, 'acc_tot')}\n                    title={'Sélectivité de la formation'}\n                />\n                <BaccalaureatMention\n                    count_tbf={getField(s, 'acc_tbf')}\n                    count_tb={getField(s, 'acc_tb')}\n                    count_b={getField(s, 'acc_b')}\n                    count_ab={getField(s, 'acc_ab')}\n                    count_sm={getField(s, 'acc_sansmention')}\n                    count_nr={getField(s, 'acc_mention_nonrenseignee')}\n                    title={'Mention au bac des néobachelier.e.s'}\n                />\n                <FillingSpeed\n                    count_start_pp={getField(s, 'pct_acc_debutpp')}\n                    count_bac={getField(s, 'pct_acc_datebac')}\n                    count_end_pp={getField(s, 'pct_acc_finpp')}\n                    title={'Vitesse de remplissage'}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default FormationInfos\n","import { useEffect, useState } from 'react'\n\nimport './App.scss'\n\nimport { Helmet } from 'react-helmet'\n\nimport { Header, MapWrapper } from 'components'\nimport { parcoursupAPI } from 'global/parcoursupAPI'\nimport axios from 'axios'\nimport { loadFormationData } from 'utils'\nimport { FormationInfos } from 'views'\n\nfunction App() {\n    const [currentView, setCurrentView] = useState<string>('findFormation')\n    const [selectedSchool, setSelectedSchool] = useState<\n        Record<string, any> | undefined\n    >()\n    const [schoolsData, setSchoolsData] = useState<Record<string, any>[]>([])\n\n    const loadSchool = async (schoolID: string) => {\n        const result = await loadFormationData(schoolID)\n        console.log(result)\n        setSelectedSchool(result)\n    }\n\n    useEffect(() => {\n        loadData()\n    }, [])\n\n    const loadData = async () => {\n        try {\n            let finished = false\n            let dataLength = 0\n            while (!finished) {\n                const requestURL =\n                    parcoursupAPI +\n                    `&q=&rows=10000&start=${dataLength}&fields=cod_aff_form,g_ea_lib_vx,g_olocalisation_des_formations`\n                const result = await axios.get(requestURL)\n                if (result.data) {\n                    dataLength += result.data.records.length\n                    setSchoolsData(\n                        schoolsData.concat(\n                            result.data.records.map(\n                                (r: { fields: any }) => r.fields\n                            )\n                        )\n                    )\n                }\n\n                finished = true\n            }\n        } catch (e) {\n            console.error('error')\n        }\n    }\n\n    useEffect(() => {\n        loadData()\n    }, [])\n\n    const renderView = () => {\n        switch (currentView) {\n            case 'findFormation':\n                return (\n                    <MapWrapper\n                        schoolsData={schoolsData}\n                        dataAttribution={''}\n                        loadSchool={loadSchool}\n                    />\n                )\n            case 'seeFormationInfos':\n                return <FormationInfos currentSchool={selectedSchool} />\n            default:\n                return (\n                    <p>Seems like you something is broken :( Reload the page</p>\n                )\n        }\n    }\n\n    return (\n        <section>\n            <Helmet>\n                <title>Parcoursup - Statistiques</title>\n                <meta\n                    name=\"description\"\n                    content=\"Visualiseur des données publiques de Parcoursup\"\n                />\n            </Helmet>\n            <Header currentView={currentView} setView={setCurrentView} />\n            <section className=\"pcs-main-section\">{renderView()}</section>\n        </section>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}