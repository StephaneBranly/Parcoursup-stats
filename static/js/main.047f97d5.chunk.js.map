{"version":3,"sources":["assets/logoParcoursup.svg","components/Header/Header.tsx","utils/formationToEmoji.ts","utils/pickRandomItem.ts","global/parcoursupAPI.ts","utils/loadFormationData.ts","components/FormationInfos/FormationInfos.tsx","assets/marker.svg","components/MapWrapper/MapWrapper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","src","logoParcoursup","alt","formationToEmoji","name","pickRandomItem","floor","Math","random","items","length","parcoursupAPI","loadFormationData","code_formation","a","requestURL","axios","get","result","data","nhits","records","fields","FormationInfos","useState","school","setSchool","loadData","useEffect","getField","fieldName","MapWrapper","props","map","setMap","featuresLayer","setFeaturesLayer","mapElement","useRef","initalFeaturesLayer","VectorLayer","source","VectorSource","initialMap","Map","target","current","undefined","layers","TileLayer","maxZoom","XYZ","url","view","View","projection","center","zoom","controls","schoolsData","features","entry","index","coord","feat","Feature","geometry","Point","transform","reverse","setStyle","Style","text","Text","Établissement","offsetY","fill","Fill","color","stroke","Stroke","width","image","Icon","markerIcon","anchor","scale","getSource","clear","addFeatures","getView","fit","getExtent","padding","ref","App","setSchoolsData","r","console","error","Helmet","content","dataAttribution","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kVAAe,MAA0B,2C,iBCgB1BA,EAZA,WACX,OACI,sBAAKC,UAAU,aAAf,UACI,qBAAKC,IAAKC,EAAgBC,IAAI,oBAC9B,oBAAIH,UAAU,iBAAd,yDAGA,kFCTCI,EAAmB,SAACC,GAC7B,OAAQA,GACJ,IAAK,eACD,OAAOC,EAAe,CAAC,iCAAS,iCAAS,iCAAS,6CAAW,8CAAY,+CAC7E,QACI,MAAO,iBCPXC,EAAkBC,KAAlBD,MAAOE,EAAWD,KAAXC,OAEFH,EAAiB,SAAUI,GACpC,OAAOA,EAAMH,EAAME,IAAWC,EAAMC,U,iBCH3BC,EACT,mGCESC,EAAiB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAEnBC,EACFJ,EAAa,6BAAyBE,EAAzB,KAHQ,SAIJG,IAAMC,IAAIF,GAJN,YAInBG,EAJmB,QAKdC,MAA8B,IAAtBD,EAAOC,KAAKC,MALN,yCAMdF,EAAOC,KAAKE,QAAQ,GAAGC,QANT,gCAQlB,IARkB,2DAUlB,IAVkB,0DAAH,sDC8BfC,G,OA7BQ,WAAO,IAAD,EACGC,mBAA8B,IADjC,mBAClBC,EADkB,KACVC,EADU,KAGnBC,EAAQ,uCAAG,4BAAAb,EAAA,sEACQF,EAAkB,SAD1B,OACPM,EADO,OAEbQ,EAAUR,GAFG,2CAAH,qDAKdU,qBAAU,WACND,MACD,IAEH,IAAME,EAAW,SAACC,GACd,OAAIL,EAAOK,GAAmBL,EAAOK,GAC9B,OAEX,OACI,sBAAK/B,UAAU,8BAAf,UACI,qBAAKA,UAAU,sBAAf,SACK8B,EAAS,qBAEd,sBAAK9B,UAAU,qBAAf,UACI,oBAAIA,UAAU,iBAAd,SAAgC8B,EAAS,iBACzC,iDAAkB1B,EAAiB,wB,iHC3BpC,MAA0B,mC,QC8G1B4B,EAnFI,SAACC,GAA4B,IAAD,EACrBR,qBADqB,mBACpCS,EADoC,KAC/BC,EAD+B,OAGvCV,qBAHuC,mBAEpCW,EAFoC,KAErBC,EAFqB,KAKrCC,EAAaC,mBAoEnB,OAlEAV,qBAAU,WAAO,IAAD,EACNW,EAAsB,IAAIC,IAAY,CACxCC,OAAQ,IAAIC,MAGVC,EAAa,IAAIC,IAAI,CACvBC,OAAM,UAAER,EAAWS,eAAb,aAAwBC,EAC9BC,OAAQ,CACJ,IAAIC,IAAU,CACVC,QAAS,GACTT,OAAQ,IAAIU,IAAI,CACZC,IAAK,iFAGbb,GAEJc,KAAM,IAAIC,IAAK,CACXC,WAAY,YACZC,OAAQ,CAAC,EAAG,GACZC,KAAM,IAEVC,SAAU,KAIdxB,EAAOS,GACPP,EAAiBG,KAClB,IAEHX,qBAAU,WACN,GAAKO,GAA8C,IAA7BH,EAAM2B,YAAYjD,OAAxC,CAEA,IAAMkD,EAAW5B,EAAM2B,YAAY1B,KAAI,SAAC4B,EAAOC,GAC3C,IAAMC,EAAQF,EAAK,+BACbG,EAAO,IAAIC,IAAQ,CACrBC,SAAU,IAAIC,IACVC,YAAUL,EAAMM,UAAW,YAAa,gBAmBhD,OAhBAL,EAAKM,SACD,IAAIC,IAAM,CACNC,KAAM,IAAIC,IAAK,CACXD,KAAMX,EAAMa,mBACZC,QAAS,GACTC,KAAM,IAAIC,IAAK,CAAEC,MAAO,SACxBC,OAAQ,IAAIC,IAAO,CAAEF,MAAO,UAAWG,MAAO,MAElDC,MAAO,IAAIC,IAAK,CACZnF,IAAKoF,EACLN,MAAO,MACPO,OAAQ,CAAC,GAAK,GACdC,MAAO,QAIZtB,KAELvB,EAASN,EAAcoD,YAC7B9C,EAAO+C,QACP/C,EAAOgD,YAAY7B,GACd3B,GACLA,EAAIyD,UAAUC,IAAIlD,EAAOmD,YAAa,CAClCC,QAAS,CAAC,IAAK,IAAK,IAAK,UAE9B,CAAC7D,EAAM2B,cAGN,sBAAK5D,UAAU,mBAAf,UACI,qBAAKA,UAAU,gBAAf,kCACA,qBAAKA,UAAU,oBAAf,SACI,qBAAK+F,IAAKzD,EAAYtC,UAAU,kBCnDjCgG,MA3Cf,WAAe,MAEiCvE,qBAFjC,gCAG2BA,mBAAgC,KAH3D,mBAGJmC,EAHI,KAGSqC,EAHT,KAKLrE,EAAQ,uCAAG,4BAAAb,EAAA,sEAGLH,EACA,6EAJK,SAKYK,IAAMC,IAFvBN,8KAHK,QAKHO,EALG,QAMEC,MACP6E,EACI9E,EAAOC,KAAKE,QAAQY,KAAI,SAACgE,GAAD,OAAwBA,EAAE3E,WARjD,gDAYT4E,QAAQC,MAAM,SAZL,yDAAH,qDAoBd,OAJAvE,qBAAU,WACND,MACD,IAGC,oCACI,eAACyE,EAAA,EAAD,WACI,8DACA,sBACIhG,KAAK,cACLiG,QAAQ,0DAGhB,cAAC,EAAD,IACA,0BAAStG,UAAU,mBAAnB,UACI,cAAC,EAAD,CAAY4D,YAAaA,EAAa2C,gBAAiB,KACvD,cAAC,EAAD,WC/BDC,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.047f97d5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoParcoursup.3da2a0da.svg\";","import logoParcoursup from '../../assets/logoParcoursup.svg'\n\nimport './Header.scss'\n\nconst Header = () => {\n    return (\n        <div className=\"pcs-header\">\n            <img src={logoParcoursup} alt=\"Logo Parcoursup\" />\n            <h1 className=\"pcs-main-title\">\n                📊 Statistiques sur la plateforme\n            </h1>\n            <div>🚧Work in Progress...🚧</div>\n        </div>\n    )\n}\n\nexport default Header\n","import { pickRandomItem } from 'utils'\n\nexport const formationToEmoji = (name: string) => {\n    switch (name) {\n        case 'informatique':\n            return pickRandomItem(['👩‍💻', '🧑‍💻', '👨‍💻', '👩🏻‍💻', ' 🧑🏻‍💻', '👨🏻‍💻'])\n        default:\n            return '⚠️'\n    }\n}\n","const { floor, random } = Math\n\nexport const pickRandomItem = <T = any>(items: T[]) => {\n    return items[floor(random() * items.length)]\n}\n","export const parcoursupAPI =\n    'https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup'\n","import axios from 'axios'\nimport { parcoursupAPI } from 'global/parcoursupAPI'\n\nexport const loadFormationData = async (code_formation: string) => {\n    try {\n        const requestURL =\n            parcoursupAPI + `&q=cod_aff_form%3D\"${code_formation}\"`\n        const result = await axios.get(requestURL)\n        if (result.data && result.data.nhits === 1) {\n            return result.data.records[0].fields\n        }\n        return {}\n    } catch (e) {\n        return {}\n    }\n}\n","import { useEffect, useState } from 'react'\nimport { formationToEmoji, loadFormationData } from 'utils'\nimport './FormationInfos.scss'\n\nconst FormationInfos = () => {\n    const [school, setSchool] = useState<Record<string, any>>({})\n\n    const loadData = async () => {\n        const result = await loadFormationData('23324')\n        setSchool(result)\n    }\n\n    useEffect(() => {\n        loadData()\n    }, [])\n\n    const getField = (fieldName: string) => {\n        if (school[fieldName]) return school[fieldName]\n        return 'NaN'\n    }\n    return (\n        <div className=\"pcs-formationinfos-fragment\">\n            <div className=\"pcs-formation-title\">\n                {getField('fil_lib_voe_acc')}\n            </div>\n            <div className=\"pcs-formationinfos\">\n                <h1 className=\"pcs-schoolname\">{getField('g_ea_lib_vx')}</h1>\n                <h2>{`Formation ${formationToEmoji('ingenieur')}`}</h2>\n            </div>\n        </div>\n    )\n}\n\nexport default FormationInfos\n","export default __webpack_public_path__ + \"static/media/marker.7a162fbb.svg\";","import { useState, useRef, useEffect, RefObject } from 'react'\n\nimport './MapWrapper.scss'\n\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport TileLayer from 'ol/layer/Tile'\nimport VectorLayer from 'ol/layer/Vector'\nimport VectorSource from 'ol/source/Vector'\nimport XYZ from 'ol/source/XYZ'\nimport Geometry from 'ol/geom/Geometry'\nimport { Feature } from 'ol'\nimport Point from 'ol/geom/Point'\nimport { transform } from 'ol/proj'\nimport Style from 'ol/style/Style'\nimport Fill from 'ol/style/Fill'\nimport Icon from 'ol/style/Icon'\nimport Text from 'ol/style/Text'\n\nimport markerIcon from '../../assets/marker.svg'\nimport Stroke from 'ol/style/Stroke'\n\nexport interface MapWrapperProps {\n    schoolsData: Record<string, any>[]\n    dataAttribution: string\n}\n\nconst MapWrapper = (props: MapWrapperProps) => {\n    const [map, setMap] = useState<Map>()\n    const [featuresLayer, setFeaturesLayer] =\n        useState<VectorLayer<VectorSource<Geometry>>>()\n\n    const mapElement = useRef() as RefObject<HTMLDivElement>\n\n    useEffect(() => {\n        const initalFeaturesLayer = new VectorLayer({\n            source: new VectorSource(),\n        })\n\n        const initialMap = new Map({\n            target: mapElement.current ?? undefined,\n            layers: [\n                new TileLayer({\n                    maxZoom: 19,\n                    source: new XYZ({\n                        url: 'https://cartodb-basemaps-a.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png',\n                    }),\n                }),\n                initalFeaturesLayer,\n            ],\n            view: new View({\n                projection: 'EPSG:3857',\n                center: [0, 0],\n                zoom: 2,\n            }),\n            controls: [],\n        })\n\n        // save map and vector layer references to state\n        setMap(initialMap)\n        setFeaturesLayer(initalFeaturesLayer)\n    }, [])\n\n    useEffect(() => {\n        if (!featuresLayer || props.schoolsData.length === 0) return\n\n        const features = props.schoolsData.map((entry, index) => {\n            const coord = entry['g_olocalisation_des_formations']\n            const feat = new Feature({\n                geometry: new Point(\n                    transform(coord.reverse(), 'EPSG:4326', 'EPSG:3857')\n                ),\n            })\n            feat.setStyle(\n                new Style({\n                    text: new Text({\n                        text: entry.Établissement,\n                        offsetY: 10,\n                        fill: new Fill({ color: '#111' }),\n                        stroke: new Stroke({ color: '#FF3333', width: 2 }),\n                    }),\n                    image: new Icon({\n                        src: markerIcon,\n                        color: 'red',\n                        anchor: [0.5, 1],\n                        scale: 0.5,\n                    }),\n                })\n            )\n            return feat\n        })\n        const source = featuresLayer.getSource()\n        source.clear()\n        source.addFeatures(features)\n        if (!map) return\n        map.getView().fit(source.getExtent(), {\n            padding: [100, 100, 100, 100],\n        })\n    }, [props.schoolsData])\n\n    return (\n        <div className=\"pcs-map-fragment\">\n            <div className=\"pcs-map-title\">Carte des formations</div>\n            <div className=\"pcs-map-container\">\n                <div ref={mapElement} className=\"pcs-map\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default MapWrapper\n","import { useEffect, useState } from 'react'\n\nimport './App.css'\n\nimport { Helmet } from 'react-helmet'\n\nimport { FormationInfos, Header, MapWrapper } from './components'\nimport { parcoursupAPI } from './global/parcoursupAPI'\nimport axios from 'axios'\n\nfunction App() {\n    // reloa\n    const [selectedSchool, setSelectedSchool] = useState<string | undefined>()\n    const [schoolsData, setSchoolsData] = useState<Record<string, any>[]>([])\n\n    const loadData = async () => {\n        try {\n            const requestURL =\n                parcoursupAPI +\n                '&q=&rows=10&fields=cod_aff_form,g_ea_lib_vx,g_olocalisation_des_formations'\n            const result = await axios.get(requestURL)\n            if (result.data) {\n                setSchoolsData(\n                    result.data.records.map((r: { fields: any }) => r.fields)\n                )\n            }\n        } catch (e) {\n            console.error('error')\n        }\n    }\n\n    useEffect(() => {\n        loadData()\n    }, [])\n\n    return (\n        <section>\n            <Helmet>\n                <title>Parcoursup - Statistiques</title>\n                <meta\n                    name=\"description\"\n                    content=\"Visualiseur des données publiques de Parcoursup\"\n                />\n            </Helmet>\n            <Header />\n            <section className=\"pcs-main-section\">\n                <MapWrapper schoolsData={schoolsData} dataAttribution={''} />\n                <FormationInfos />\n            </section>\n        </section>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}