{"version":3,"sources":["components/Header/Header.tsx","utils/pickRandomItem.ts","global/parcoursupAPI.ts","utils/loadFormationData.ts","utils/getField.ts","components/FormationInfos/FormationInfos.tsx","assets/marker.svg","components/MapWrapper/clusterLayer.ts","components/MapWrapper/clusterSource.ts","components/MapWrapper/osmLayer.ts","components/MapWrapper/MapWrapper.tsx","utils/clickMap.ts","components/GirlBoyProportion/GirlBoyProportion.tsx","components/FunnelCandidates/FunnelCandidates.tsx","components/StatsCard/StatsCard.tsx","components/BaccalaureatMention/BaccalaureatMention.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","Math","floor","random","parcoursupAPI","loadFormationData","code_formation","a","requestURL","axios","get","result","data","nhits","records","fields","getField","school","fieldName","undefined","FormationInfos","props","s","currentSchool","count_candidat_boys","count_candidat_girls","count_accepted_boys","count_accepted_girls","title","count_candidates","count_classed","count_proposition_received","count_proposition_accepted","count_tb","count_b","count_ab","count_sm","count_nr","clusterLayer","clusterSource","styleCache","VectorLayer","source","style","feature","size","length","schoolName","getProperties","Style","image","Icon","src","markerIcon","color","anchor","scale","text","Text","offsetY","Circle","radius","stroke","Stroke","fill","Fill","toString","Cluster","distance","minDistance","osmLayer","TileLayer","maxZoom","XYZ","url","MapWrapper","useState","map","setMap","setSource","mapElement","useRef","useEffect","new_source","VectorSource","initialMap","Map","target","current","layers","view","View","projection","center","zoom","controls","addEventListener","e","evt","setSelectedSchoolID","features","forEachFeatureAtPixel","pixel","f","push","console","log","properties","clickMap","loadSchool","schoolsData","filter","entry","coord","feat","Feature","geometry","Point","transform","reverse","setProperties","clear","addFeatures","getView","fit","getExtent","padding","ref","GirlBoyProportion","dataCandidats","key","value","dataAccepted","pourcentageCandidates","toFixed","pourcentageAccepted","description","ResponsiveContainer","width","height","PieChart","Pie","startAngle","endAngle","isAnimationActive","dataKey","nameKey","cx","cy","innerRadius","outerRadius","LabelList","position","Legend","iconSize","layout","verticalAlign","align","FunnelCandidates","createLabel","val","name","label","FunnelChart","Funnel","offset","StatsCard","children","BaccalaureatMention","total","App","selectedSchool","setSelectedSchool","setSchoolsData","schoolID","loadData","finished","dataLength","concat","r","error","Helmet","content","dataAttribution","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c876b1af.chunk.js","sourcesContent":["import logoParcoursup from '../../assets/logoParcoursup.svg'\n\nimport './Header.scss'\n\nconst Header = () => {\n    return (\n        <div className=\"pcs-header\">\n            {/* <img\n                className=\"pcs-header-logo\"\n                src={logoParcoursup}\n                alt=\"Logo Parcoursup\"\n            /> */}\n            <h1 className=\"pcs-header-title\">\n                📊 Statistiques sur la plateforme\n            </h1>\n        </div>\n    )\n}\n\nexport default Header\n","const { floor, random } = Math\n\nexport const pickRandomItem = <T = any>(items: T[]) => {\n    return items[floor(random() * items.length)]\n}\n","export const parcoursupAPI =\n    'https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup'\n","import axios from 'axios'\nimport { parcoursupAPI } from 'global/parcoursupAPI'\n\nexport const loadFormationData = async (code_formation: string) => {\n    try {\n        const requestURL =\n            parcoursupAPI + `&q=cod_aff_form%3D\"${code_formation}\"`\n        const result = await axios.get(requestURL)\n        if (result.data && result.data.nhits === 1) {\n            return result.data.records[0].fields\n        }\n        return {}\n    } catch (e) {\n        return {}\n    }\n}\n","export  const getField = (school: Record<string, any>, fieldName: string) => {\n    if (school[fieldName] !== undefined) return school[fieldName]\n    return 'NaN'\n}","import { BaccalaureatMention, FunnelCandidates, GirlBoyProportion } from 'components'\nimport { getField } from 'utils'\nimport './FormationInfos.scss'\n\nexport interface FormationInfosProps {\n    currentSchool: Record<string, any> | undefined\n}\n\nconst FormationInfos = (props: FormationInfosProps) => {\n    const { currentSchool } = props\n    const s = currentSchool\n    \n    if (!s)\n        return (<div className=\"pcs-formationinfos-fragment\">\n        <h1 className=\"pcs-formationinfos-title\">\n            Informations générales\n        </h1>\n        <div className=\"pcs-formationinfos-main\">\n            <h1 className=\"pcs-schoolname\">\n                Selectionnez une formation\n            </h1>\n        </div>\n        </div>)\n    return (\n        <div className=\"pcs-formationinfos-fragment\">\n            <h1 className=\"pcs-formationinfos-title\">\n                Informations générales\n            </h1>\n            <div className=\"pcs-formationinfos-main\">\n                <h1 className=\"pcs-schoolname\">\n                    {getField(s,'fil_lib_voe_acc')}\n                </h1>\n                <p>\n                    <ul className='pcs-stats-ul'>\n                    <li>🏢 {getField(s,'g_ea_lib_vx')} - <i>{getField(s,'contrat_etab')}</i></li>\n                    <li>🗺 {getField(s,'dep_lib')} ({getField(s,'dep')}) -{' '}\n                    {getField(s,'region_etab_aff')}</li>\n                    </ul>\n                </p>\n            </div>\n            <div className=\"pcs-formationinfos-stats\">\n                <p><b>En 2020 :</b>\n                    <ul className='pcs-stats-ul'>\n                        <li>🎓 <b>{getField(s,'capa_fin')}</b> places disponibles</li>\n                        <li>📄 <b>{getField(s,'voe_tot')}</b> voeux enregistrés</li>\n                    </ul>\n                </p>\n            </div>\n\n            <div className='pcs-formationinfo-statscard-wrapper'>\n                <GirlBoyProportion \n                    count_candidat_boys={getField(s,'voe_tot') - getField(s,'voe_tot_f')} \n                    count_candidat_girls={getField(s,'voe_tot_f')} \n                    count_accepted_boys={getField(s,'acc_tot') - getField(s,'acc_tot_f')} \n                    count_accepted_girls={getField(s,'acc_tot_f')} \n                    title={'Proportion de candidates / candidats'} />\n                <FunnelCandidates \n                    count_candidates={getField(s,'nb_voe_pp')}\n                    count_classed={getField(s,'nb_cla_pp')}\n                    count_proposition_received={getField(s,'prop_tot')}\n                    count_proposition_accepted={getField(s,'acc_tot')} \n                    title={'Sélectivité de la formation'} />\n                <BaccalaureatMention\n                    count_tb={getField(s,'acc_tb')}\n                    count_b={getField(s,'acc_b')}\n                    count_ab={getField(s,'acc_ab')}\n                    count_sm={getField(s,'acc_sansmention')}\n                    count_nr={getField(s,'acc_mention_nonrenseignee')} \n                    title={'Mentions des néo-bachelier.e.s'} />\n            </div>\n        </div>\n    )\n}\n\nexport default FormationInfos\n","export default __webpack_public_path__ + \"static/media/marker.7a162fbb.svg\";","import VectorLayer from \"ol/layer/Vector\";\nimport Fill from \"ol/style/Fill\";\nimport Circle from \"ol/style/Circle\";\nimport Stroke from \"ol/style/Stroke\";\nimport Text from \"ol/style/Text\";\nimport Icon from \"ol/style/Icon\";\nimport Style from \"ol/style/Style\";\nimport markerIcon from '../../assets/marker.svg'\n\nconst clusterLayer = (clusterSource: any) => \n{\n    const styleCache: Record<string, Style[]> = {};\n    return new VectorLayer({\n    source: clusterSource,\n    style: (feature) => {\n      const size = feature.get('features').length;\n      let style = styleCache[size];\n      if (!style || size === 1) {\n        if (size === 1)\n        {\n            const schoolName = feature.get('features')[0].getProperties()['g_ea_lib_vx']\n            style=  [new Style({\n                image: new Icon({\n                    src: markerIcon,\n                    color: '#e63946',\n                    anchor: [0.5, 1],\n                    scale: 0.5,\n                }),\n                text: new Text({\n                    text: schoolName,\n                    offsetY: 10,\n                })\n            })]\n        }\n        else {\n            style = [new Style({\n                image: new Circle({\n                  radius: 15,\n                  stroke: new Stroke({\n                    color: '#e63946',\n                  }),\n                  fill: new Fill({\n                    color: '#1d3557',\n                  }),\n                }),\n                text: new Text({\n                  text: size.toString(),\n                  fill: new Fill({\n                    color: '#fff',\n                  }),\n                }),\n              })];\n        }\n        styleCache[size] = style;\n      }\n      return style;\n    },\n  });\n}\n\nexport default clusterLayer\n","import Geometry from 'ol/geom/Geometry';\nimport {Cluster, Vector as VectorSource} from 'ol/source';\n\nconst clusterSource = (source: VectorSource<Geometry>) => {\n    return new Cluster({\n        distance: 40,\n        minDistance: 20,\n        source: source,\n    });\n}\n\nexport default clusterSource","import TileLayer from 'ol/layer/Tile'\nimport XYZ from 'ol/source/XYZ'\n\nexport const osmLayer = () => {\n    return new TileLayer({\n    maxZoom: 19,\n    source: new XYZ({\n        url: 'https://cartodb-basemaps-a.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png',\n    }),\n    })\n}\n\nexport default osmLayer","import { useState, useRef, useEffect, RefObject } from 'react'\n\nimport './MapWrapper.scss'\n\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport VectorSource from 'ol/source/Vector'\nimport Geometry from 'ol/geom/Geometry'\nimport { Feature, MapBrowserEvent } from 'ol'\nimport Point from 'ol/geom/Point'\nimport { transform } from 'ol/proj'\n\nimport clusterLayer from './clusterLayer'\nimport clusterSource from './clusterSource'\nimport osmLayer from './osmLayer'\nimport { clickMap } from 'utils'\n\nexport interface MapWrapperProps {\n    schoolsData: Record<string, any>[]\n    loadSchool: (schoolID: string) => void\n    dataAttribution: string\n}\n\nconst MapWrapper = (props: MapWrapperProps) => {\n    const [map, setMap] = useState<Map>()\n    const [source, setSource] =\n        useState<VectorSource<Geometry>>()\n\n    const mapElement = useRef() as RefObject<HTMLDivElement>\n\n    useEffect(() => {\n        const new_source = new VectorSource()\n\n        const initialMap = new Map({\n            target: mapElement.current ?? undefined,\n            layers: [\n                osmLayer(),\n                clusterLayer(clusterSource(new_source)),\n            ],\n            view: new View({\n                projection: 'EPSG:3857',\n                center: [0, 0],\n                zoom: 2,\n            }),\n            controls: [],\n        })\n\n        initialMap.addEventListener('singleclick', (e) => clickMap(e as MapBrowserEvent<UIEvent>, initialMap, props.loadSchool))\n        // save map and vector layer references to state\n        setMap(initialMap)\n        setSource(new_source)\n    }, [])\n\n    useEffect(() => {\n        if (!source || props.schoolsData.length === 0) return\n\n        const features = props.schoolsData\n        .filter((entry) => { return entry['g_olocalisation_des_formations'] !== undefined })\n        .map((entry) => {\n            const coord = entry['g_olocalisation_des_formations']\n            const feat = new Feature({\n                geometry: new Point(\n                    transform(coord.reverse(), 'EPSG:4326', 'EPSG:3857')\n                ),\n            })\n            feat.setProperties({ ...entry })\n            return feat\n        })\n\n        if(!features) return\n        source.clear()\n        source.addFeatures(features)\n        if (!map) return\n        map.getView().fit(source.getExtent(), {\n            padding: [100, 100, 100, 100],\n        })\n    }, [props.schoolsData])\n\n    return (\n        <div className=\"pcs-map-fragment\">\n            <h1 className=\"pcs-map-title\">Carte des formations</h1>\n            <div className=\"pcs-map-container\">\n                <div ref={mapElement} className=\"pcs-map\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default MapWrapper\n","import { Map, MapBrowserEvent } from 'ol'\n\nexport const clickMap = (evt: MapBrowserEvent<UIEvent>, map: Map, setSelectedSchoolID: (id: string) => void) => {\n    const features: any[] = []\n    map.forEachFeatureAtPixel(evt.pixel, (f: any) => features.push(f))\n    console.log(features)\n    if (features.length !== 1) return\n    if (features[0].getProperties().features.length !== 1) return\n    const properties = features[0].getProperties().features[0].getProperties()\n    console.log(properties)\n    if (properties['cod_aff_form'])\n        setSelectedSchoolID(properties['cod_aff_form'])\n    \n}","\nimport { StatsCard } from 'components'\nimport { ResponsiveContainer, PieChart, Pie, Legend, LabelList } from 'recharts'\n\nexport interface GirlBoyProportionProps {\n    count_candidat_boys: number,\n    count_candidat_girls: number,\n    count_accepted_boys: number,\n    count_accepted_girls: number,\n    title: string,\n}\n\nconst GirlBoyProportion = (props: GirlBoyProportionProps) => {\n    const dataCandidats = [\n        { key: \"Nombre de candidates\", value: props.count_candidat_girls, fill: '#e63946'},\n        { key: \"Nombre de candidats\", value: props.count_candidat_boys, fill: '#a8dadc'}\n    ]\n\n    const dataAccepted = [\n        { key: \"Nombre d'acceptées\", value: props.count_accepted_girls, fill: '#6b6fdb'},\n        { key: \"Nombre d'acceptés\", value: props.count_accepted_boys, fill: '#76d169'}\n        ]\n\n    const pourcentageCandidates = (props.count_candidat_girls / ( props.count_candidat_girls + props.count_candidat_boys) * 100).toFixed(0)\n    const pourcentageAccepted = (props.count_accepted_girls / ( props.count_accepted_girls + props.count_accepted_boys) * 100).toFixed(0)\n    const description = `Soit ${pourcentageCandidates}% de candidates et ${pourcentageAccepted}% ayant accepté définitivement la proposition`\n    \n    return (\n        <StatsCard title={props.title} description={description}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                    <Pie\n                        data={dataCandidats}\n                        startAngle={0} endAngle={180}\n                        isAnimationActive={false}\n                        dataKey=\"value\" nameKey=\"key\" cx=\"50%\" cy=\"100%\" innerRadius={80} outerRadius={120} >\n                       <LabelList position=\"insideTop\" fill=\"#000\" stroke=\"none\" dataKey=\"value\" />\n                    </Pie>\n\n                    <Pie\n                        data={dataAccepted} \n                        isAnimationActive={false}\n                        startAngle={0} endAngle={180}\n                        dataKey=\"value\" nameKey=\"key\" cx=\"50%\" cy=\"100%\" innerRadius={20} outerRadius={60} >\n                       <LabelList position=\"inside\" fill=\"#000\" stroke=\"none\" dataKey=\"value\" />\n                    </Pie>\n                    <Legend iconSize={10} layout='horizontal' verticalAlign='bottom' align=\"center\" />\n                </PieChart>\n            </ResponsiveContainer>\n    </StatsCard>\n    )\n}\n\nexport default GirlBoyProportion\n","\nimport { StatsCard } from 'components'\nimport { ResponsiveContainer, Funnel, FunnelChart, LabelList } from 'recharts'\n\nexport interface FunnelCandidatesProps {\n    count_candidates: number,\n    count_classed: number,\n    count_proposition_received: number,\n    count_proposition_accepted: number,\n    title: string,\n}\n\nconst FunnelCandidates = (props: FunnelCandidatesProps) => {\n    const { title, count_classed, count_proposition_accepted, count_proposition_received, count_candidates} = props\n    const createLabel = (val: number, description: string): string => {\n        return `${val} ${description} (${(val / count_candidates * 100).toFixed(0)}%)`\n    }\n\n    const data = [\n        { name: 'Nombre de candidats', value: count_candidates, fill: \"#e63946\", label: createLabel(count_candidates, \"candidat.e.s\") },\n        { name: 'Nombre de candidats classés', value: count_classed, fill: \"#a8dadc\", label: createLabel(count_classed, \"classé.e.s\") },\n        { name: 'Nombre de candidats ayant recu une proposition', value: count_proposition_received, fill: \"#457b9d\", label: createLabel(count_proposition_received, \"reçu.e.s\") },\n        { name: 'Nombre de candidats ayant accepté la proposition', value: count_proposition_accepted, fill: \"#1d3557\", label: createLabel(count_proposition_accepted, \"accepté.e.s\") },  \n    ]\n\n    return (\n        <StatsCard title={title}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n                <FunnelChart>\n                    <Funnel\n                        dataKey=\"value\"\n                        data={data}\n                        isAnimationActive={false}\n                    >\n                        <LabelList position=\"insideTopLeft\" offset={10} fill=\"#000\" stroke=\"none\" dataKey=\"label\" />\n                    </Funnel>\n                </FunnelChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default FunnelCandidates\n","import './StatsCard.scss'\nexport interface StatsCardProps {\n    children: JSX.Element,\n    title: string,\n    description?: string\n}\n\nconst StatsCard = (props: StatsCardProps) => {\n    const { children, title, description } = props\n\n    return (\n        <div className='pcs-statscard' >\n            <h1 className='pcs-statscard-title'>{title}</h1>\n            <div className='pcs-statscard-content'>\n                {children}\n                {description && <p className='pcs-statscard-description'>{description}</p>}\n            </div>\n        </div>\n    )\n}\n\nexport default StatsCard\n","\nimport { StatsCard } from 'components'\nimport { COLORS } from 'html2canvas/dist/types/css/types/color'\nimport { ResponsiveContainer, PolarAngleAxis, PolarGrid, PolarRadiusAxis, Radar, RadarChart, Cell, Pie, PieChart, LabelList, Legend } from 'recharts'\n\nexport interface BaccalaureatMentionProps {\n    count_tb: number,\n    count_b: number,\n    count_ab: number,\n    count_sm: number,\n    count_nr: number,\n    title: string,\n}\n\nconst BaccalaureatMention = (props: BaccalaureatMentionProps) => {\n    const { title, count_ab, count_b, count_nr, count_sm, count_tb } = props\n    \n    const total = count_ab + count_b + count_nr + count_sm + count_tb\n\n    const createLabel = (val: number): string => {\n        if (!val) return ''\n        return `${val} (${(val / total * 100).toFixed(0)}%)`\n    }\n\n    const data = [\n        { name: 'Très bien', value: count_tb, fill: \"#e63946\", label: createLabel(count_tb) },\n        { name: 'Bien', value: count_b, fill: \"#a8dadc\", label: createLabel(count_b) },\n        { name: 'Assez bien', value: count_ab, fill: \"#457b9d\", label: createLabel(count_ab) },\n        { name: 'Sans mention', value: count_sm, fill: \"#1d3557\", label: createLabel(count_sm) },  \n        { name: 'Non référencé', value: count_nr, fill: \"#2e2e2e\", label: createLabel(count_nr) },  \n    ]\n\n    return (\n        <StatsCard title={title}>\n            <ResponsiveContainer width=\"100%\" height={250}>\n            <PieChart>\n                <Pie\n                    data={data}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    isAnimationActive={false}\n                    outerRadius={80}\n                    dataKey=\"value\"\n                    label\n                >\n                    {/* <LabelList position=\"inside\" offset={10} fill=\"#000\" stroke=\"none\" dataKey=\"label\" /> */}\n                    </Pie>\n                    <Legend iconSize={10} layout='horizontal' verticalAlign='bottom' align=\"center\" />\n                </PieChart>\n            </ResponsiveContainer>\n        </StatsCard>\n    )\n}\n\nexport default BaccalaureatMention\n","import { useEffect, useState } from 'react'\n\nimport './App.scss'\n\nimport { Helmet } from 'react-helmet'\n\nimport { FormationInfos, Header, MapWrapper } from './components'\nimport { parcoursupAPI } from './global/parcoursupAPI'\nimport axios from 'axios'\nimport { loadFormationData } from 'utils'\n\nfunction App() {\n    const [selectedSchool, setSelectedSchool] = useState<Record<string, any> | undefined>()\n    const [schoolsData, setSchoolsData] = useState<Record<string, any>[]>([])\n\n    const loadSchool = async (schoolID: string) => {\n        const result = await loadFormationData(schoolID)\n        console.log(result)\n        setSelectedSchool(result)\n    }\n\n    useEffect(() => {\n        loadData()\n    }, [])\n\n   \n    const loadData = async () => {\n        try {\n            let finished = false\n            let dataLength = 0\n            while (!finished)\n            {\n                const requestURL =\n                parcoursupAPI +\n                `&q=&rows=1000&start=${dataLength}&fields=cod_aff_form,g_ea_lib_vx,g_olocalisation_des_formations`\n                const result = await axios.get(requestURL)\n                if (result.data) {\n                    dataLength += result.data.records.length\n                    setSchoolsData(\n                        schoolsData.concat(result.data.records.map((r: { fields: any }) => r.fields))\n                    )\n                }\n\n                finished = true\n            }\n        } catch (e) {\n            console.error('error')\n        }\n    }\n\n    useEffect(() => {\n        loadData()\n    }, [])\n\n    return (\n        <section>\n            <Helmet>\n                <title>Parcoursup - Statistiques</title>\n                <meta\n                    name=\"description\"\n                    content=\"Visualiseur des données publiques de Parcoursup\"\n                />\n            </Helmet>\n            <Header />\n            <section className=\"pcs-main-section\">\n                <MapWrapper schoolsData={schoolsData} dataAttribution={''} loadSchool={loadSchool} />\n                <FormationInfos currentSchool={selectedSchool} />\n            </section>\n        </section>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}